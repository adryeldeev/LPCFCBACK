
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model carro
 * 
 */
export type carro = $Result.DefaultSelection<Prisma.$carroPayload>
/**
 * Model marca
 * 
 */
export type marca = $Result.DefaultSelection<Prisma.$marcaPayload>
/**
 * Model imagem
 * 
 */
export type imagem = $Result.DefaultSelection<Prisma.$imagemPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model vendedor
 * 
 */
export type vendedor = $Result.DefaultSelection<Prisma.$vendedorPayload>
/**
 * Model propostaVenda
 * 
 */
export type propostaVenda = $Result.DefaultSelection<Prisma.$propostaVendaPayload>
/**
 * Model financiamento
 * 
 */
export type financiamento = $Result.DefaultSelection<Prisma.$financiamentoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const user_role: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type user_role = (typeof user_role)[keyof typeof user_role]

}

export type user_role = $Enums.user_role

export const user_role: typeof $Enums.user_role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Carros
 * const carros = await prisma.carro.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Carros
   * const carros = await prisma.carro.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.carro`: Exposes CRUD operations for the **carro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carros
    * const carros = await prisma.carro.findMany()
    * ```
    */
  get carro(): Prisma.carroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marca`: Exposes CRUD operations for the **marca** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Marcas
    * const marcas = await prisma.marca.findMany()
    * ```
    */
  get marca(): Prisma.marcaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.imagem`: Exposes CRUD operations for the **imagem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Imagems
    * const imagems = await prisma.imagem.findMany()
    * ```
    */
  get imagem(): Prisma.imagemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vendedor`: Exposes CRUD operations for the **vendedor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendedors
    * const vendedors = await prisma.vendedor.findMany()
    * ```
    */
  get vendedor(): Prisma.vendedorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.propostaVenda`: Exposes CRUD operations for the **propostaVenda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PropostaVendas
    * const propostaVendas = await prisma.propostaVenda.findMany()
    * ```
    */
  get propostaVenda(): Prisma.propostaVendaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.financiamento`: Exposes CRUD operations for the **financiamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Financiamentos
    * const financiamentos = await prisma.financiamento.findMany()
    * ```
    */
  get financiamento(): Prisma.financiamentoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    carro: 'carro',
    marca: 'marca',
    imagem: 'imagem',
    user: 'user',
    vendedor: 'vendedor',
    propostaVenda: 'propostaVenda',
    financiamento: 'financiamento'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "carro" | "marca" | "imagem" | "user" | "vendedor" | "propostaVenda" | "financiamento"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      carro: {
        payload: Prisma.$carroPayload<ExtArgs>
        fields: Prisma.carroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.carroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.carroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          findFirst: {
            args: Prisma.carroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.carroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          findMany: {
            args: Prisma.carroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>[]
          }
          create: {
            args: Prisma.carroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          createMany: {
            args: Prisma.carroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.carroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          update: {
            args: Prisma.carroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          deleteMany: {
            args: Prisma.carroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.carroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.carroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carroPayload>
          }
          aggregate: {
            args: Prisma.CarroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarro>
          }
          groupBy: {
            args: Prisma.carroGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarroGroupByOutputType>[]
          }
          count: {
            args: Prisma.carroCountArgs<ExtArgs>
            result: $Utils.Optional<CarroCountAggregateOutputType> | number
          }
        }
      }
      marca: {
        payload: Prisma.$marcaPayload<ExtArgs>
        fields: Prisma.marcaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.marcaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.marcaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload>
          }
          findFirst: {
            args: Prisma.marcaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.marcaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload>
          }
          findMany: {
            args: Prisma.marcaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload>[]
          }
          create: {
            args: Prisma.marcaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload>
          }
          createMany: {
            args: Prisma.marcaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.marcaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload>
          }
          update: {
            args: Prisma.marcaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload>
          }
          deleteMany: {
            args: Prisma.marcaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.marcaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.marcaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$marcaPayload>
          }
          aggregate: {
            args: Prisma.MarcaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarca>
          }
          groupBy: {
            args: Prisma.marcaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarcaGroupByOutputType>[]
          }
          count: {
            args: Prisma.marcaCountArgs<ExtArgs>
            result: $Utils.Optional<MarcaCountAggregateOutputType> | number
          }
        }
      }
      imagem: {
        payload: Prisma.$imagemPayload<ExtArgs>
        fields: Prisma.imagemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.imagemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.imagemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          findFirst: {
            args: Prisma.imagemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.imagemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          findMany: {
            args: Prisma.imagemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>[]
          }
          create: {
            args: Prisma.imagemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          createMany: {
            args: Prisma.imagemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.imagemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          update: {
            args: Prisma.imagemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          deleteMany: {
            args: Prisma.imagemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.imagemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.imagemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$imagemPayload>
          }
          aggregate: {
            args: Prisma.ImagemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImagem>
          }
          groupBy: {
            args: Prisma.imagemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImagemGroupByOutputType>[]
          }
          count: {
            args: Prisma.imagemCountArgs<ExtArgs>
            result: $Utils.Optional<ImagemCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      vendedor: {
        payload: Prisma.$vendedorPayload<ExtArgs>
        fields: Prisma.vendedorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.vendedorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.vendedorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload>
          }
          findFirst: {
            args: Prisma.vendedorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.vendedorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload>
          }
          findMany: {
            args: Prisma.vendedorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload>[]
          }
          create: {
            args: Prisma.vendedorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload>
          }
          createMany: {
            args: Prisma.vendedorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.vendedorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload>
          }
          update: {
            args: Prisma.vendedorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload>
          }
          deleteMany: {
            args: Prisma.vendedorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.vendedorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.vendedorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$vendedorPayload>
          }
          aggregate: {
            args: Prisma.VendedorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendedor>
          }
          groupBy: {
            args: Prisma.vendedorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendedorGroupByOutputType>[]
          }
          count: {
            args: Prisma.vendedorCountArgs<ExtArgs>
            result: $Utils.Optional<VendedorCountAggregateOutputType> | number
          }
        }
      }
      propostaVenda: {
        payload: Prisma.$propostaVendaPayload<ExtArgs>
        fields: Prisma.propostaVendaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.propostaVendaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.propostaVendaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload>
          }
          findFirst: {
            args: Prisma.propostaVendaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.propostaVendaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload>
          }
          findMany: {
            args: Prisma.propostaVendaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload>[]
          }
          create: {
            args: Prisma.propostaVendaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload>
          }
          createMany: {
            args: Prisma.propostaVendaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.propostaVendaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload>
          }
          update: {
            args: Prisma.propostaVendaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload>
          }
          deleteMany: {
            args: Prisma.propostaVendaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.propostaVendaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.propostaVendaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propostaVendaPayload>
          }
          aggregate: {
            args: Prisma.PropostaVendaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePropostaVenda>
          }
          groupBy: {
            args: Prisma.propostaVendaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PropostaVendaGroupByOutputType>[]
          }
          count: {
            args: Prisma.propostaVendaCountArgs<ExtArgs>
            result: $Utils.Optional<PropostaVendaCountAggregateOutputType> | number
          }
        }
      }
      financiamento: {
        payload: Prisma.$financiamentoPayload<ExtArgs>
        fields: Prisma.financiamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.financiamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.financiamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload>
          }
          findFirst: {
            args: Prisma.financiamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.financiamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload>
          }
          findMany: {
            args: Prisma.financiamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload>[]
          }
          create: {
            args: Prisma.financiamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload>
          }
          createMany: {
            args: Prisma.financiamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.financiamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload>
          }
          update: {
            args: Prisma.financiamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload>
          }
          deleteMany: {
            args: Prisma.financiamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.financiamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.financiamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$financiamentoPayload>
          }
          aggregate: {
            args: Prisma.FinanciamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinanciamento>
          }
          groupBy: {
            args: Prisma.financiamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinanciamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.financiamentoCountArgs<ExtArgs>
            result: $Utils.Optional<FinanciamentoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    carro?: carroOmit
    marca?: marcaOmit
    imagem?: imagemOmit
    user?: userOmit
    vendedor?: vendedorOmit
    propostaVenda?: propostaVendaOmit
    financiamento?: financiamentoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CarroCountOutputType
   */

  export type CarroCountOutputType = {
    imagens: number
  }

  export type CarroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    imagens?: boolean | CarroCountOutputTypeCountImagensArgs
  }

  // Custom InputTypes
  /**
   * CarroCountOutputType without action
   */
  export type CarroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarroCountOutputType
     */
    select?: CarroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CarroCountOutputType without action
   */
  export type CarroCountOutputTypeCountImagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imagemWhereInput
  }


  /**
   * Count Type MarcaCountOutputType
   */

  export type MarcaCountOutputType = {
    carros: number
  }

  export type MarcaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carros?: boolean | MarcaCountOutputTypeCountCarrosArgs
  }

  // Custom InputTypes
  /**
   * MarcaCountOutputType without action
   */
  export type MarcaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarcaCountOutputType
     */
    select?: MarcaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MarcaCountOutputType without action
   */
  export type MarcaCountOutputTypeCountCarrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carroWhereInput
  }


  /**
   * Models
   */

  /**
   * Model carro
   */

  export type AggregateCarro = {
    _count: CarroCountAggregateOutputType | null
    _avg: CarroAvgAggregateOutputType | null
    _sum: CarroSumAggregateOutputType | null
    _min: CarroMinAggregateOutputType | null
    _max: CarroMaxAggregateOutputType | null
  }

  export type CarroAvgAggregateOutputType = {
    id: number | null
    ano: number | null
    preco: number | null
    quilometragem: number | null
    portas: number | null
    marcaId: number | null
  }

  export type CarroSumAggregateOutputType = {
    id: number | null
    ano: number | null
    preco: number | null
    quilometragem: number | null
    portas: number | null
    marcaId: number | null
  }

  export type CarroMinAggregateOutputType = {
    id: number | null
    modelo: string | null
    ano: number | null
    preco: number | null
    quilometragem: number | null
    cor: string | null
    combustivel: string | null
    cambio: string | null
    portas: number | null
    descricao: string | null
    imagem: string | null
    destaque: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    marcaId: number | null
  }

  export type CarroMaxAggregateOutputType = {
    id: number | null
    modelo: string | null
    ano: number | null
    preco: number | null
    quilometragem: number | null
    cor: string | null
    combustivel: string | null
    cambio: string | null
    portas: number | null
    descricao: string | null
    imagem: string | null
    destaque: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    marcaId: number | null
  }

  export type CarroCountAggregateOutputType = {
    id: number
    modelo: number
    ano: number
    preco: number
    quilometragem: number
    cor: number
    combustivel: number
    cambio: number
    portas: number
    descricao: number
    imagem: number
    destaque: number
    createdAt: number
    updatedAt: number
    marcaId: number
    _all: number
  }


  export type CarroAvgAggregateInputType = {
    id?: true
    ano?: true
    preco?: true
    quilometragem?: true
    portas?: true
    marcaId?: true
  }

  export type CarroSumAggregateInputType = {
    id?: true
    ano?: true
    preco?: true
    quilometragem?: true
    portas?: true
    marcaId?: true
  }

  export type CarroMinAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    preco?: true
    quilometragem?: true
    cor?: true
    combustivel?: true
    cambio?: true
    portas?: true
    descricao?: true
    imagem?: true
    destaque?: true
    createdAt?: true
    updatedAt?: true
    marcaId?: true
  }

  export type CarroMaxAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    preco?: true
    quilometragem?: true
    cor?: true
    combustivel?: true
    cambio?: true
    portas?: true
    descricao?: true
    imagem?: true
    destaque?: true
    createdAt?: true
    updatedAt?: true
    marcaId?: true
  }

  export type CarroCountAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    preco?: true
    quilometragem?: true
    cor?: true
    combustivel?: true
    cambio?: true
    portas?: true
    descricao?: true
    imagem?: true
    destaque?: true
    createdAt?: true
    updatedAt?: true
    marcaId?: true
    _all?: true
  }

  export type CarroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carro to aggregate.
     */
    where?: carroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carros to fetch.
     */
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: carroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned carros
    **/
    _count?: true | CarroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarroMaxAggregateInputType
  }

  export type GetCarroAggregateType<T extends CarroAggregateArgs> = {
        [P in keyof T & keyof AggregateCarro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarro[P]>
      : GetScalarType<T[P], AggregateCarro[P]>
  }




  export type carroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carroWhereInput
    orderBy?: carroOrderByWithAggregationInput | carroOrderByWithAggregationInput[]
    by: CarroScalarFieldEnum[] | CarroScalarFieldEnum
    having?: carroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarroCountAggregateInputType | true
    _avg?: CarroAvgAggregateInputType
    _sum?: CarroSumAggregateInputType
    _min?: CarroMinAggregateInputType
    _max?: CarroMaxAggregateInputType
  }

  export type CarroGroupByOutputType = {
    id: number
    modelo: string
    ano: number
    preco: number
    quilometragem: number | null
    cor: string | null
    combustivel: string | null
    cambio: string | null
    portas: number | null
    descricao: string | null
    imagem: string | null
    destaque: boolean
    createdAt: Date
    updatedAt: Date
    marcaId: number
    _count: CarroCountAggregateOutputType | null
    _avg: CarroAvgAggregateOutputType | null
    _sum: CarroSumAggregateOutputType | null
    _min: CarroMinAggregateOutputType | null
    _max: CarroMaxAggregateOutputType | null
  }

  type GetCarroGroupByPayload<T extends carroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarroGroupByOutputType[P]>
            : GetScalarType<T[P], CarroGroupByOutputType[P]>
        }
      >
    >


  export type carroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelo?: boolean
    ano?: boolean
    preco?: boolean
    quilometragem?: boolean
    cor?: boolean
    combustivel?: boolean
    cambio?: boolean
    portas?: boolean
    descricao?: boolean
    imagem?: boolean
    destaque?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    marcaId?: boolean
    marca?: boolean | marcaDefaultArgs<ExtArgs>
    imagens?: boolean | carro$imagensArgs<ExtArgs>
    _count?: boolean | CarroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carro"]>



  export type carroSelectScalar = {
    id?: boolean
    modelo?: boolean
    ano?: boolean
    preco?: boolean
    quilometragem?: boolean
    cor?: boolean
    combustivel?: boolean
    cambio?: boolean
    portas?: boolean
    descricao?: boolean
    imagem?: boolean
    destaque?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    marcaId?: boolean
  }

  export type carroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "modelo" | "ano" | "preco" | "quilometragem" | "cor" | "combustivel" | "cambio" | "portas" | "descricao" | "imagem" | "destaque" | "createdAt" | "updatedAt" | "marcaId", ExtArgs["result"]["carro"]>
  export type carroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    marca?: boolean | marcaDefaultArgs<ExtArgs>
    imagens?: boolean | carro$imagensArgs<ExtArgs>
    _count?: boolean | CarroCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $carroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "carro"
    objects: {
      marca: Prisma.$marcaPayload<ExtArgs>
      imagens: Prisma.$imagemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      modelo: string
      ano: number
      preco: number
      quilometragem: number | null
      cor: string | null
      combustivel: string | null
      cambio: string | null
      portas: number | null
      descricao: string | null
      imagem: string | null
      destaque: boolean
      createdAt: Date
      updatedAt: Date
      marcaId: number
    }, ExtArgs["result"]["carro"]>
    composites: {}
  }

  type carroGetPayload<S extends boolean | null | undefined | carroDefaultArgs> = $Result.GetResult<Prisma.$carroPayload, S>

  type carroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<carroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CarroCountAggregateInputType | true
    }

  export interface carroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['carro'], meta: { name: 'carro' } }
    /**
     * Find zero or one Carro that matches the filter.
     * @param {carroFindUniqueArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends carroFindUniqueArgs>(args: SelectSubset<T, carroFindUniqueArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Carro that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {carroFindUniqueOrThrowArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends carroFindUniqueOrThrowArgs>(args: SelectSubset<T, carroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Carro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroFindFirstArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends carroFindFirstArgs>(args?: SelectSubset<T, carroFindFirstArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Carro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroFindFirstOrThrowArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends carroFindFirstOrThrowArgs>(args?: SelectSubset<T, carroFindFirstOrThrowArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Carros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carros
     * const carros = await prisma.carro.findMany()
     * 
     * // Get first 10 Carros
     * const carros = await prisma.carro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carroWithIdOnly = await prisma.carro.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends carroFindManyArgs>(args?: SelectSubset<T, carroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Carro.
     * @param {carroCreateArgs} args - Arguments to create a Carro.
     * @example
     * // Create one Carro
     * const Carro = await prisma.carro.create({
     *   data: {
     *     // ... data to create a Carro
     *   }
     * })
     * 
     */
    create<T extends carroCreateArgs>(args: SelectSubset<T, carroCreateArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Carros.
     * @param {carroCreateManyArgs} args - Arguments to create many Carros.
     * @example
     * // Create many Carros
     * const carro = await prisma.carro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends carroCreateManyArgs>(args?: SelectSubset<T, carroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Carro.
     * @param {carroDeleteArgs} args - Arguments to delete one Carro.
     * @example
     * // Delete one Carro
     * const Carro = await prisma.carro.delete({
     *   where: {
     *     // ... filter to delete one Carro
     *   }
     * })
     * 
     */
    delete<T extends carroDeleteArgs>(args: SelectSubset<T, carroDeleteArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Carro.
     * @param {carroUpdateArgs} args - Arguments to update one Carro.
     * @example
     * // Update one Carro
     * const carro = await prisma.carro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends carroUpdateArgs>(args: SelectSubset<T, carroUpdateArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Carros.
     * @param {carroDeleteManyArgs} args - Arguments to filter Carros to delete.
     * @example
     * // Delete a few Carros
     * const { count } = await prisma.carro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends carroDeleteManyArgs>(args?: SelectSubset<T, carroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carros
     * const carro = await prisma.carro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends carroUpdateManyArgs>(args: SelectSubset<T, carroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Carro.
     * @param {carroUpsertArgs} args - Arguments to update or create a Carro.
     * @example
     * // Update or create a Carro
     * const carro = await prisma.carro.upsert({
     *   create: {
     *     // ... data to create a Carro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carro we want to update
     *   }
     * })
     */
    upsert<T extends carroUpsertArgs>(args: SelectSubset<T, carroUpsertArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Carros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroCountArgs} args - Arguments to filter Carros to count.
     * @example
     * // Count the number of Carros
     * const count = await prisma.carro.count({
     *   where: {
     *     // ... the filter for the Carros we want to count
     *   }
     * })
    **/
    count<T extends carroCountArgs>(
      args?: Subset<T, carroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarroAggregateArgs>(args: Subset<T, CarroAggregateArgs>): Prisma.PrismaPromise<GetCarroAggregateType<T>>

    /**
     * Group by Carro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends carroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: carroGroupByArgs['orderBy'] }
        : { orderBy?: carroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, carroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the carro model
   */
  readonly fields: carroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for carro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__carroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    marca<T extends marcaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, marcaDefaultArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    imagens<T extends carro$imagensArgs<ExtArgs> = {}>(args?: Subset<T, carro$imagensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the carro model
   */
  interface carroFieldRefs {
    readonly id: FieldRef<"carro", 'Int'>
    readonly modelo: FieldRef<"carro", 'String'>
    readonly ano: FieldRef<"carro", 'Int'>
    readonly preco: FieldRef<"carro", 'Float'>
    readonly quilometragem: FieldRef<"carro", 'Int'>
    readonly cor: FieldRef<"carro", 'String'>
    readonly combustivel: FieldRef<"carro", 'String'>
    readonly cambio: FieldRef<"carro", 'String'>
    readonly portas: FieldRef<"carro", 'Int'>
    readonly descricao: FieldRef<"carro", 'String'>
    readonly imagem: FieldRef<"carro", 'String'>
    readonly destaque: FieldRef<"carro", 'Boolean'>
    readonly createdAt: FieldRef<"carro", 'DateTime'>
    readonly updatedAt: FieldRef<"carro", 'DateTime'>
    readonly marcaId: FieldRef<"carro", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * carro findUnique
   */
  export type carroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * Filter, which carro to fetch.
     */
    where: carroWhereUniqueInput
  }

  /**
   * carro findUniqueOrThrow
   */
  export type carroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * Filter, which carro to fetch.
     */
    where: carroWhereUniqueInput
  }

  /**
   * carro findFirst
   */
  export type carroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * Filter, which carro to fetch.
     */
    where?: carroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carros to fetch.
     */
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carros.
     */
    cursor?: carroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carros.
     */
    distinct?: CarroScalarFieldEnum | CarroScalarFieldEnum[]
  }

  /**
   * carro findFirstOrThrow
   */
  export type carroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * Filter, which carro to fetch.
     */
    where?: carroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carros to fetch.
     */
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carros.
     */
    cursor?: carroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carros.
     */
    distinct?: CarroScalarFieldEnum | CarroScalarFieldEnum[]
  }

  /**
   * carro findMany
   */
  export type carroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * Filter, which carros to fetch.
     */
    where?: carroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carros to fetch.
     */
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing carros.
     */
    cursor?: carroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carros.
     */
    skip?: number
    distinct?: CarroScalarFieldEnum | CarroScalarFieldEnum[]
  }

  /**
   * carro create
   */
  export type carroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * The data needed to create a carro.
     */
    data: XOR<carroCreateInput, carroUncheckedCreateInput>
  }

  /**
   * carro createMany
   */
  export type carroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many carros.
     */
    data: carroCreateManyInput | carroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * carro update
   */
  export type carroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * The data needed to update a carro.
     */
    data: XOR<carroUpdateInput, carroUncheckedUpdateInput>
    /**
     * Choose, which carro to update.
     */
    where: carroWhereUniqueInput
  }

  /**
   * carro updateMany
   */
  export type carroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update carros.
     */
    data: XOR<carroUpdateManyMutationInput, carroUncheckedUpdateManyInput>
    /**
     * Filter which carros to update
     */
    where?: carroWhereInput
    /**
     * Limit how many carros to update.
     */
    limit?: number
  }

  /**
   * carro upsert
   */
  export type carroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * The filter to search for the carro to update in case it exists.
     */
    where: carroWhereUniqueInput
    /**
     * In case the carro found by the `where` argument doesn't exist, create a new carro with this data.
     */
    create: XOR<carroCreateInput, carroUncheckedCreateInput>
    /**
     * In case the carro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<carroUpdateInput, carroUncheckedUpdateInput>
  }

  /**
   * carro delete
   */
  export type carroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    /**
     * Filter which carro to delete.
     */
    where: carroWhereUniqueInput
  }

  /**
   * carro deleteMany
   */
  export type carroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which carros to delete
     */
    where?: carroWhereInput
    /**
     * Limit how many carros to delete.
     */
    limit?: number
  }

  /**
   * carro.imagens
   */
  export type carro$imagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    where?: imagemWhereInput
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    cursor?: imagemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImagemScalarFieldEnum | ImagemScalarFieldEnum[]
  }

  /**
   * carro without action
   */
  export type carroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
  }


  /**
   * Model marca
   */

  export type AggregateMarca = {
    _count: MarcaCountAggregateOutputType | null
    _avg: MarcaAvgAggregateOutputType | null
    _sum: MarcaSumAggregateOutputType | null
    _min: MarcaMinAggregateOutputType | null
    _max: MarcaMaxAggregateOutputType | null
  }

  export type MarcaAvgAggregateOutputType = {
    id: number | null
  }

  export type MarcaSumAggregateOutputType = {
    id: number | null
  }

  export type MarcaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    logo: string | null
  }

  export type MarcaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    logo: string | null
  }

  export type MarcaCountAggregateOutputType = {
    id: number
    nome: number
    logo: number
    _all: number
  }


  export type MarcaAvgAggregateInputType = {
    id?: true
  }

  export type MarcaSumAggregateInputType = {
    id?: true
  }

  export type MarcaMinAggregateInputType = {
    id?: true
    nome?: true
    logo?: true
  }

  export type MarcaMaxAggregateInputType = {
    id?: true
    nome?: true
    logo?: true
  }

  export type MarcaCountAggregateInputType = {
    id?: true
    nome?: true
    logo?: true
    _all?: true
  }

  export type MarcaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which marca to aggregate.
     */
    where?: marcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of marcas to fetch.
     */
    orderBy?: marcaOrderByWithRelationInput | marcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: marcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned marcas
    **/
    _count?: true | MarcaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarcaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarcaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarcaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarcaMaxAggregateInputType
  }

  export type GetMarcaAggregateType<T extends MarcaAggregateArgs> = {
        [P in keyof T & keyof AggregateMarca]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarca[P]>
      : GetScalarType<T[P], AggregateMarca[P]>
  }




  export type marcaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: marcaWhereInput
    orderBy?: marcaOrderByWithAggregationInput | marcaOrderByWithAggregationInput[]
    by: MarcaScalarFieldEnum[] | MarcaScalarFieldEnum
    having?: marcaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarcaCountAggregateInputType | true
    _avg?: MarcaAvgAggregateInputType
    _sum?: MarcaSumAggregateInputType
    _min?: MarcaMinAggregateInputType
    _max?: MarcaMaxAggregateInputType
  }

  export type MarcaGroupByOutputType = {
    id: number
    nome: string
    logo: string
    _count: MarcaCountAggregateOutputType | null
    _avg: MarcaAvgAggregateOutputType | null
    _sum: MarcaSumAggregateOutputType | null
    _min: MarcaMinAggregateOutputType | null
    _max: MarcaMaxAggregateOutputType | null
  }

  type GetMarcaGroupByPayload<T extends marcaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarcaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarcaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarcaGroupByOutputType[P]>
            : GetScalarType<T[P], MarcaGroupByOutputType[P]>
        }
      >
    >


  export type marcaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    logo?: boolean
    carros?: boolean | marca$carrosArgs<ExtArgs>
    _count?: boolean | MarcaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marca"]>



  export type marcaSelectScalar = {
    id?: boolean
    nome?: boolean
    logo?: boolean
  }

  export type marcaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "logo", ExtArgs["result"]["marca"]>
  export type marcaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carros?: boolean | marca$carrosArgs<ExtArgs>
    _count?: boolean | MarcaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $marcaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "marca"
    objects: {
      carros: Prisma.$carroPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      logo: string
    }, ExtArgs["result"]["marca"]>
    composites: {}
  }

  type marcaGetPayload<S extends boolean | null | undefined | marcaDefaultArgs> = $Result.GetResult<Prisma.$marcaPayload, S>

  type marcaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<marcaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarcaCountAggregateInputType | true
    }

  export interface marcaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['marca'], meta: { name: 'marca' } }
    /**
     * Find zero or one Marca that matches the filter.
     * @param {marcaFindUniqueArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends marcaFindUniqueArgs>(args: SelectSubset<T, marcaFindUniqueArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Marca that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {marcaFindUniqueOrThrowArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends marcaFindUniqueOrThrowArgs>(args: SelectSubset<T, marcaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Marca that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marcaFindFirstArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends marcaFindFirstArgs>(args?: SelectSubset<T, marcaFindFirstArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Marca that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marcaFindFirstOrThrowArgs} args - Arguments to find a Marca
     * @example
     * // Get one Marca
     * const marca = await prisma.marca.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends marcaFindFirstOrThrowArgs>(args?: SelectSubset<T, marcaFindFirstOrThrowArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Marcas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marcaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Marcas
     * const marcas = await prisma.marca.findMany()
     * 
     * // Get first 10 Marcas
     * const marcas = await prisma.marca.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marcaWithIdOnly = await prisma.marca.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends marcaFindManyArgs>(args?: SelectSubset<T, marcaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Marca.
     * @param {marcaCreateArgs} args - Arguments to create a Marca.
     * @example
     * // Create one Marca
     * const Marca = await prisma.marca.create({
     *   data: {
     *     // ... data to create a Marca
     *   }
     * })
     * 
     */
    create<T extends marcaCreateArgs>(args: SelectSubset<T, marcaCreateArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Marcas.
     * @param {marcaCreateManyArgs} args - Arguments to create many Marcas.
     * @example
     * // Create many Marcas
     * const marca = await prisma.marca.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends marcaCreateManyArgs>(args?: SelectSubset<T, marcaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Marca.
     * @param {marcaDeleteArgs} args - Arguments to delete one Marca.
     * @example
     * // Delete one Marca
     * const Marca = await prisma.marca.delete({
     *   where: {
     *     // ... filter to delete one Marca
     *   }
     * })
     * 
     */
    delete<T extends marcaDeleteArgs>(args: SelectSubset<T, marcaDeleteArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Marca.
     * @param {marcaUpdateArgs} args - Arguments to update one Marca.
     * @example
     * // Update one Marca
     * const marca = await prisma.marca.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends marcaUpdateArgs>(args: SelectSubset<T, marcaUpdateArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Marcas.
     * @param {marcaDeleteManyArgs} args - Arguments to filter Marcas to delete.
     * @example
     * // Delete a few Marcas
     * const { count } = await prisma.marca.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends marcaDeleteManyArgs>(args?: SelectSubset<T, marcaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marcaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Marcas
     * const marca = await prisma.marca.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends marcaUpdateManyArgs>(args: SelectSubset<T, marcaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Marca.
     * @param {marcaUpsertArgs} args - Arguments to update or create a Marca.
     * @example
     * // Update or create a Marca
     * const marca = await prisma.marca.upsert({
     *   create: {
     *     // ... data to create a Marca
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Marca we want to update
     *   }
     * })
     */
    upsert<T extends marcaUpsertArgs>(args: SelectSubset<T, marcaUpsertArgs<ExtArgs>>): Prisma__marcaClient<$Result.GetResult<Prisma.$marcaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marcaCountArgs} args - Arguments to filter Marcas to count.
     * @example
     * // Count the number of Marcas
     * const count = await prisma.marca.count({
     *   where: {
     *     // ... the filter for the Marcas we want to count
     *   }
     * })
    **/
    count<T extends marcaCountArgs>(
      args?: Subset<T, marcaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarcaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Marca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarcaAggregateArgs>(args: Subset<T, MarcaAggregateArgs>): Prisma.PrismaPromise<GetMarcaAggregateType<T>>

    /**
     * Group by Marca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {marcaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends marcaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: marcaGroupByArgs['orderBy'] }
        : { orderBy?: marcaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, marcaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarcaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the marca model
   */
  readonly fields: marcaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for marca.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__marcaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    carros<T extends marca$carrosArgs<ExtArgs> = {}>(args?: Subset<T, marca$carrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the marca model
   */
  interface marcaFieldRefs {
    readonly id: FieldRef<"marca", 'Int'>
    readonly nome: FieldRef<"marca", 'String'>
    readonly logo: FieldRef<"marca", 'String'>
  }
    

  // Custom InputTypes
  /**
   * marca findUnique
   */
  export type marcaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * Filter, which marca to fetch.
     */
    where: marcaWhereUniqueInput
  }

  /**
   * marca findUniqueOrThrow
   */
  export type marcaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * Filter, which marca to fetch.
     */
    where: marcaWhereUniqueInput
  }

  /**
   * marca findFirst
   */
  export type marcaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * Filter, which marca to fetch.
     */
    where?: marcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of marcas to fetch.
     */
    orderBy?: marcaOrderByWithRelationInput | marcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for marcas.
     */
    cursor?: marcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of marcas.
     */
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * marca findFirstOrThrow
   */
  export type marcaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * Filter, which marca to fetch.
     */
    where?: marcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of marcas to fetch.
     */
    orderBy?: marcaOrderByWithRelationInput | marcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for marcas.
     */
    cursor?: marcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` marcas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of marcas.
     */
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * marca findMany
   */
  export type marcaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * Filter, which marcas to fetch.
     */
    where?: marcaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of marcas to fetch.
     */
    orderBy?: marcaOrderByWithRelationInput | marcaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing marcas.
     */
    cursor?: marcaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` marcas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` marcas.
     */
    skip?: number
    distinct?: MarcaScalarFieldEnum | MarcaScalarFieldEnum[]
  }

  /**
   * marca create
   */
  export type marcaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * The data needed to create a marca.
     */
    data: XOR<marcaCreateInput, marcaUncheckedCreateInput>
  }

  /**
   * marca createMany
   */
  export type marcaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many marcas.
     */
    data: marcaCreateManyInput | marcaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * marca update
   */
  export type marcaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * The data needed to update a marca.
     */
    data: XOR<marcaUpdateInput, marcaUncheckedUpdateInput>
    /**
     * Choose, which marca to update.
     */
    where: marcaWhereUniqueInput
  }

  /**
   * marca updateMany
   */
  export type marcaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update marcas.
     */
    data: XOR<marcaUpdateManyMutationInput, marcaUncheckedUpdateManyInput>
    /**
     * Filter which marcas to update
     */
    where?: marcaWhereInput
    /**
     * Limit how many marcas to update.
     */
    limit?: number
  }

  /**
   * marca upsert
   */
  export type marcaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * The filter to search for the marca to update in case it exists.
     */
    where: marcaWhereUniqueInput
    /**
     * In case the marca found by the `where` argument doesn't exist, create a new marca with this data.
     */
    create: XOR<marcaCreateInput, marcaUncheckedCreateInput>
    /**
     * In case the marca was found with the provided `where` argument, update it with this data.
     */
    update: XOR<marcaUpdateInput, marcaUncheckedUpdateInput>
  }

  /**
   * marca delete
   */
  export type marcaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
    /**
     * Filter which marca to delete.
     */
    where: marcaWhereUniqueInput
  }

  /**
   * marca deleteMany
   */
  export type marcaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which marcas to delete
     */
    where?: marcaWhereInput
    /**
     * Limit how many marcas to delete.
     */
    limit?: number
  }

  /**
   * marca.carros
   */
  export type marca$carrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the carro
     */
    select?: carroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the carro
     */
    omit?: carroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carroInclude<ExtArgs> | null
    where?: carroWhereInput
    orderBy?: carroOrderByWithRelationInput | carroOrderByWithRelationInput[]
    cursor?: carroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarroScalarFieldEnum | CarroScalarFieldEnum[]
  }

  /**
   * marca without action
   */
  export type marcaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the marca
     */
    select?: marcaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the marca
     */
    omit?: marcaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: marcaInclude<ExtArgs> | null
  }


  /**
   * Model imagem
   */

  export type AggregateImagem = {
    _count: ImagemCountAggregateOutputType | null
    _avg: ImagemAvgAggregateOutputType | null
    _sum: ImagemSumAggregateOutputType | null
    _min: ImagemMinAggregateOutputType | null
    _max: ImagemMaxAggregateOutputType | null
  }

  export type ImagemAvgAggregateOutputType = {
    id: number | null
    carroId: number | null
  }

  export type ImagemSumAggregateOutputType = {
    id: number | null
    carroId: number | null
  }

  export type ImagemMinAggregateOutputType = {
    id: number | null
    url: string | null
    carroId: number | null
  }

  export type ImagemMaxAggregateOutputType = {
    id: number | null
    url: string | null
    carroId: number | null
  }

  export type ImagemCountAggregateOutputType = {
    id: number
    url: number
    carroId: number
    _all: number
  }


  export type ImagemAvgAggregateInputType = {
    id?: true
    carroId?: true
  }

  export type ImagemSumAggregateInputType = {
    id?: true
    carroId?: true
  }

  export type ImagemMinAggregateInputType = {
    id?: true
    url?: true
    carroId?: true
  }

  export type ImagemMaxAggregateInputType = {
    id?: true
    url?: true
    carroId?: true
  }

  export type ImagemCountAggregateInputType = {
    id?: true
    url?: true
    carroId?: true
    _all?: true
  }

  export type ImagemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imagem to aggregate.
     */
    where?: imagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagems to fetch.
     */
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned imagems
    **/
    _count?: true | ImagemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImagemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImagemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagemMaxAggregateInputType
  }

  export type GetImagemAggregateType<T extends ImagemAggregateArgs> = {
        [P in keyof T & keyof AggregateImagem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImagem[P]>
      : GetScalarType<T[P], AggregateImagem[P]>
  }




  export type imagemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: imagemWhereInput
    orderBy?: imagemOrderByWithAggregationInput | imagemOrderByWithAggregationInput[]
    by: ImagemScalarFieldEnum[] | ImagemScalarFieldEnum
    having?: imagemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagemCountAggregateInputType | true
    _avg?: ImagemAvgAggregateInputType
    _sum?: ImagemSumAggregateInputType
    _min?: ImagemMinAggregateInputType
    _max?: ImagemMaxAggregateInputType
  }

  export type ImagemGroupByOutputType = {
    id: number
    url: string
    carroId: number
    _count: ImagemCountAggregateOutputType | null
    _avg: ImagemAvgAggregateOutputType | null
    _sum: ImagemSumAggregateOutputType | null
    _min: ImagemMinAggregateOutputType | null
    _max: ImagemMaxAggregateOutputType | null
  }

  type GetImagemGroupByPayload<T extends imagemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImagemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagemGroupByOutputType[P]>
            : GetScalarType<T[P], ImagemGroupByOutputType[P]>
        }
      >
    >


  export type imagemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    carroId?: boolean
    carro?: boolean | carroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imagem"]>



  export type imagemSelectScalar = {
    id?: boolean
    url?: boolean
    carroId?: boolean
  }

  export type imagemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "carroId", ExtArgs["result"]["imagem"]>
  export type imagemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carro?: boolean | carroDefaultArgs<ExtArgs>
  }

  export type $imagemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "imagem"
    objects: {
      carro: Prisma.$carroPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
      carroId: number
    }, ExtArgs["result"]["imagem"]>
    composites: {}
  }

  type imagemGetPayload<S extends boolean | null | undefined | imagemDefaultArgs> = $Result.GetResult<Prisma.$imagemPayload, S>

  type imagemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<imagemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImagemCountAggregateInputType | true
    }

  export interface imagemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['imagem'], meta: { name: 'imagem' } }
    /**
     * Find zero or one Imagem that matches the filter.
     * @param {imagemFindUniqueArgs} args - Arguments to find a Imagem
     * @example
     * // Get one Imagem
     * const imagem = await prisma.imagem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends imagemFindUniqueArgs>(args: SelectSubset<T, imagemFindUniqueArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Imagem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {imagemFindUniqueOrThrowArgs} args - Arguments to find a Imagem
     * @example
     * // Get one Imagem
     * const imagem = await prisma.imagem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends imagemFindUniqueOrThrowArgs>(args: SelectSubset<T, imagemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Imagem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemFindFirstArgs} args - Arguments to find a Imagem
     * @example
     * // Get one Imagem
     * const imagem = await prisma.imagem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends imagemFindFirstArgs>(args?: SelectSubset<T, imagemFindFirstArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Imagem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemFindFirstOrThrowArgs} args - Arguments to find a Imagem
     * @example
     * // Get one Imagem
     * const imagem = await prisma.imagem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends imagemFindFirstOrThrowArgs>(args?: SelectSubset<T, imagemFindFirstOrThrowArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Imagems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Imagems
     * const imagems = await prisma.imagem.findMany()
     * 
     * // Get first 10 Imagems
     * const imagems = await prisma.imagem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagemWithIdOnly = await prisma.imagem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends imagemFindManyArgs>(args?: SelectSubset<T, imagemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Imagem.
     * @param {imagemCreateArgs} args - Arguments to create a Imagem.
     * @example
     * // Create one Imagem
     * const Imagem = await prisma.imagem.create({
     *   data: {
     *     // ... data to create a Imagem
     *   }
     * })
     * 
     */
    create<T extends imagemCreateArgs>(args: SelectSubset<T, imagemCreateArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Imagems.
     * @param {imagemCreateManyArgs} args - Arguments to create many Imagems.
     * @example
     * // Create many Imagems
     * const imagem = await prisma.imagem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends imagemCreateManyArgs>(args?: SelectSubset<T, imagemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Imagem.
     * @param {imagemDeleteArgs} args - Arguments to delete one Imagem.
     * @example
     * // Delete one Imagem
     * const Imagem = await prisma.imagem.delete({
     *   where: {
     *     // ... filter to delete one Imagem
     *   }
     * })
     * 
     */
    delete<T extends imagemDeleteArgs>(args: SelectSubset<T, imagemDeleteArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Imagem.
     * @param {imagemUpdateArgs} args - Arguments to update one Imagem.
     * @example
     * // Update one Imagem
     * const imagem = await prisma.imagem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends imagemUpdateArgs>(args: SelectSubset<T, imagemUpdateArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Imagems.
     * @param {imagemDeleteManyArgs} args - Arguments to filter Imagems to delete.
     * @example
     * // Delete a few Imagems
     * const { count } = await prisma.imagem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends imagemDeleteManyArgs>(args?: SelectSubset<T, imagemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Imagems
     * const imagem = await prisma.imagem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends imagemUpdateManyArgs>(args: SelectSubset<T, imagemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Imagem.
     * @param {imagemUpsertArgs} args - Arguments to update or create a Imagem.
     * @example
     * // Update or create a Imagem
     * const imagem = await prisma.imagem.upsert({
     *   create: {
     *     // ... data to create a Imagem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Imagem we want to update
     *   }
     * })
     */
    upsert<T extends imagemUpsertArgs>(args: SelectSubset<T, imagemUpsertArgs<ExtArgs>>): Prisma__imagemClient<$Result.GetResult<Prisma.$imagemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Imagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemCountArgs} args - Arguments to filter Imagems to count.
     * @example
     * // Count the number of Imagems
     * const count = await prisma.imagem.count({
     *   where: {
     *     // ... the filter for the Imagems we want to count
     *   }
     * })
    **/
    count<T extends imagemCountArgs>(
      args?: Subset<T, imagemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Imagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagemAggregateArgs>(args: Subset<T, ImagemAggregateArgs>): Prisma.PrismaPromise<GetImagemAggregateType<T>>

    /**
     * Group by Imagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imagemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends imagemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: imagemGroupByArgs['orderBy'] }
        : { orderBy?: imagemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, imagemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the imagem model
   */
  readonly fields: imagemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for imagem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__imagemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    carro<T extends carroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, carroDefaultArgs<ExtArgs>>): Prisma__carroClient<$Result.GetResult<Prisma.$carroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the imagem model
   */
  interface imagemFieldRefs {
    readonly id: FieldRef<"imagem", 'Int'>
    readonly url: FieldRef<"imagem", 'String'>
    readonly carroId: FieldRef<"imagem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * imagem findUnique
   */
  export type imagemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagem to fetch.
     */
    where: imagemWhereUniqueInput
  }

  /**
   * imagem findUniqueOrThrow
   */
  export type imagemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagem to fetch.
     */
    where: imagemWhereUniqueInput
  }

  /**
   * imagem findFirst
   */
  export type imagemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagem to fetch.
     */
    where?: imagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagems to fetch.
     */
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imagems.
     */
    cursor?: imagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imagems.
     */
    distinct?: ImagemScalarFieldEnum | ImagemScalarFieldEnum[]
  }

  /**
   * imagem findFirstOrThrow
   */
  export type imagemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagem to fetch.
     */
    where?: imagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagems to fetch.
     */
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for imagems.
     */
    cursor?: imagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of imagems.
     */
    distinct?: ImagemScalarFieldEnum | ImagemScalarFieldEnum[]
  }

  /**
   * imagem findMany
   */
  export type imagemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter, which imagems to fetch.
     */
    where?: imagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of imagems to fetch.
     */
    orderBy?: imagemOrderByWithRelationInput | imagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing imagems.
     */
    cursor?: imagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` imagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` imagems.
     */
    skip?: number
    distinct?: ImagemScalarFieldEnum | ImagemScalarFieldEnum[]
  }

  /**
   * imagem create
   */
  export type imagemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * The data needed to create a imagem.
     */
    data: XOR<imagemCreateInput, imagemUncheckedCreateInput>
  }

  /**
   * imagem createMany
   */
  export type imagemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many imagems.
     */
    data: imagemCreateManyInput | imagemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * imagem update
   */
  export type imagemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * The data needed to update a imagem.
     */
    data: XOR<imagemUpdateInput, imagemUncheckedUpdateInput>
    /**
     * Choose, which imagem to update.
     */
    where: imagemWhereUniqueInput
  }

  /**
   * imagem updateMany
   */
  export type imagemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update imagems.
     */
    data: XOR<imagemUpdateManyMutationInput, imagemUncheckedUpdateManyInput>
    /**
     * Filter which imagems to update
     */
    where?: imagemWhereInput
    /**
     * Limit how many imagems to update.
     */
    limit?: number
  }

  /**
   * imagem upsert
   */
  export type imagemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * The filter to search for the imagem to update in case it exists.
     */
    where: imagemWhereUniqueInput
    /**
     * In case the imagem found by the `where` argument doesn't exist, create a new imagem with this data.
     */
    create: XOR<imagemCreateInput, imagemUncheckedCreateInput>
    /**
     * In case the imagem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imagemUpdateInput, imagemUncheckedUpdateInput>
  }

  /**
   * imagem delete
   */
  export type imagemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
    /**
     * Filter which imagem to delete.
     */
    where: imagemWhereUniqueInput
  }

  /**
   * imagem deleteMany
   */
  export type imagemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which imagems to delete
     */
    where?: imagemWhereInput
    /**
     * Limit how many imagems to delete.
     */
    limit?: number
  }

  /**
   * imagem without action
   */
  export type imagemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the imagem
     */
    select?: imagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the imagem
     */
    omit?: imagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: imagemInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.user_role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.user_role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    role: $Enums.user_role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>



  export type userSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      role: $Enums.user_role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly name: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly role: FieldRef<"user", 'user_role'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
    readonly updatedAt: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
  }


  /**
   * Model vendedor
   */

  export type AggregateVendedor = {
    _count: VendedorCountAggregateOutputType | null
    _avg: VendedorAvgAggregateOutputType | null
    _sum: VendedorSumAggregateOutputType | null
    _min: VendedorMinAggregateOutputType | null
    _max: VendedorMaxAggregateOutputType | null
  }

  export type VendedorAvgAggregateOutputType = {
    id: number | null
  }

  export type VendedorSumAggregateOutputType = {
    id: number | null
  }

  export type VendedorMinAggregateOutputType = {
    id: number | null
    nome: string | null
    telefone: string | null
    createdAt: Date | null
  }

  export type VendedorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    telefone: string | null
    createdAt: Date | null
  }

  export type VendedorCountAggregateOutputType = {
    id: number
    nome: number
    telefone: number
    createdAt: number
    _all: number
  }


  export type VendedorAvgAggregateInputType = {
    id?: true
  }

  export type VendedorSumAggregateInputType = {
    id?: true
  }

  export type VendedorMinAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    createdAt?: true
  }

  export type VendedorMaxAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    createdAt?: true
  }

  export type VendedorCountAggregateInputType = {
    id?: true
    nome?: true
    telefone?: true
    createdAt?: true
    _all?: true
  }

  export type VendedorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which vendedor to aggregate.
     */
    where?: vendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendedors to fetch.
     */
    orderBy?: vendedorOrderByWithRelationInput | vendedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: vendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned vendedors
    **/
    _count?: true | VendedorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendedorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendedorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendedorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendedorMaxAggregateInputType
  }

  export type GetVendedorAggregateType<T extends VendedorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendedor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendedor[P]>
      : GetScalarType<T[P], AggregateVendedor[P]>
  }




  export type vendedorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: vendedorWhereInput
    orderBy?: vendedorOrderByWithAggregationInput | vendedorOrderByWithAggregationInput[]
    by: VendedorScalarFieldEnum[] | VendedorScalarFieldEnum
    having?: vendedorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendedorCountAggregateInputType | true
    _avg?: VendedorAvgAggregateInputType
    _sum?: VendedorSumAggregateInputType
    _min?: VendedorMinAggregateInputType
    _max?: VendedorMaxAggregateInputType
  }

  export type VendedorGroupByOutputType = {
    id: number
    nome: string
    telefone: string
    createdAt: Date
    _count: VendedorCountAggregateOutputType | null
    _avg: VendedorAvgAggregateOutputType | null
    _sum: VendedorSumAggregateOutputType | null
    _min: VendedorMinAggregateOutputType | null
    _max: VendedorMaxAggregateOutputType | null
  }

  type GetVendedorGroupByPayload<T extends vendedorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendedorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendedorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendedorGroupByOutputType[P]>
            : GetScalarType<T[P], VendedorGroupByOutputType[P]>
        }
      >
    >


  export type vendedorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    telefone?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["vendedor"]>



  export type vendedorSelectScalar = {
    id?: boolean
    nome?: boolean
    telefone?: boolean
    createdAt?: boolean
  }

  export type vendedorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "telefone" | "createdAt", ExtArgs["result"]["vendedor"]>

  export type $vendedorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "vendedor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      telefone: string
      createdAt: Date
    }, ExtArgs["result"]["vendedor"]>
    composites: {}
  }

  type vendedorGetPayload<S extends boolean | null | undefined | vendedorDefaultArgs> = $Result.GetResult<Prisma.$vendedorPayload, S>

  type vendedorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<vendedorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendedorCountAggregateInputType | true
    }

  export interface vendedorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['vendedor'], meta: { name: 'vendedor' } }
    /**
     * Find zero or one Vendedor that matches the filter.
     * @param {vendedorFindUniqueArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends vendedorFindUniqueArgs>(args: SelectSubset<T, vendedorFindUniqueArgs<ExtArgs>>): Prisma__vendedorClient<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vendedor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {vendedorFindUniqueOrThrowArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends vendedorFindUniqueOrThrowArgs>(args: SelectSubset<T, vendedorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__vendedorClient<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendedor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorFindFirstArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends vendedorFindFirstArgs>(args?: SelectSubset<T, vendedorFindFirstArgs<ExtArgs>>): Prisma__vendedorClient<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vendedor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorFindFirstOrThrowArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends vendedorFindFirstOrThrowArgs>(args?: SelectSubset<T, vendedorFindFirstOrThrowArgs<ExtArgs>>): Prisma__vendedorClient<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendedors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendedors
     * const vendedors = await prisma.vendedor.findMany()
     * 
     * // Get first 10 Vendedors
     * const vendedors = await prisma.vendedor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendedorWithIdOnly = await prisma.vendedor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends vendedorFindManyArgs>(args?: SelectSubset<T, vendedorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vendedor.
     * @param {vendedorCreateArgs} args - Arguments to create a Vendedor.
     * @example
     * // Create one Vendedor
     * const Vendedor = await prisma.vendedor.create({
     *   data: {
     *     // ... data to create a Vendedor
     *   }
     * })
     * 
     */
    create<T extends vendedorCreateArgs>(args: SelectSubset<T, vendedorCreateArgs<ExtArgs>>): Prisma__vendedorClient<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendedors.
     * @param {vendedorCreateManyArgs} args - Arguments to create many Vendedors.
     * @example
     * // Create many Vendedors
     * const vendedor = await prisma.vendedor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends vendedorCreateManyArgs>(args?: SelectSubset<T, vendedorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vendedor.
     * @param {vendedorDeleteArgs} args - Arguments to delete one Vendedor.
     * @example
     * // Delete one Vendedor
     * const Vendedor = await prisma.vendedor.delete({
     *   where: {
     *     // ... filter to delete one Vendedor
     *   }
     * })
     * 
     */
    delete<T extends vendedorDeleteArgs>(args: SelectSubset<T, vendedorDeleteArgs<ExtArgs>>): Prisma__vendedorClient<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vendedor.
     * @param {vendedorUpdateArgs} args - Arguments to update one Vendedor.
     * @example
     * // Update one Vendedor
     * const vendedor = await prisma.vendedor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends vendedorUpdateArgs>(args: SelectSubset<T, vendedorUpdateArgs<ExtArgs>>): Prisma__vendedorClient<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendedors.
     * @param {vendedorDeleteManyArgs} args - Arguments to filter Vendedors to delete.
     * @example
     * // Delete a few Vendedors
     * const { count } = await prisma.vendedor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends vendedorDeleteManyArgs>(args?: SelectSubset<T, vendedorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendedors
     * const vendedor = await prisma.vendedor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends vendedorUpdateManyArgs>(args: SelectSubset<T, vendedorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendedor.
     * @param {vendedorUpsertArgs} args - Arguments to update or create a Vendedor.
     * @example
     * // Update or create a Vendedor
     * const vendedor = await prisma.vendedor.upsert({
     *   create: {
     *     // ... data to create a Vendedor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendedor we want to update
     *   }
     * })
     */
    upsert<T extends vendedorUpsertArgs>(args: SelectSubset<T, vendedorUpsertArgs<ExtArgs>>): Prisma__vendedorClient<$Result.GetResult<Prisma.$vendedorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorCountArgs} args - Arguments to filter Vendedors to count.
     * @example
     * // Count the number of Vendedors
     * const count = await prisma.vendedor.count({
     *   where: {
     *     // ... the filter for the Vendedors we want to count
     *   }
     * })
    **/
    count<T extends vendedorCountArgs>(
      args?: Subset<T, vendedorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendedorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendedorAggregateArgs>(args: Subset<T, VendedorAggregateArgs>): Prisma.PrismaPromise<GetVendedorAggregateType<T>>

    /**
     * Group by Vendedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends vendedorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: vendedorGroupByArgs['orderBy'] }
        : { orderBy?: vendedorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, vendedorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendedorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the vendedor model
   */
  readonly fields: vendedorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for vendedor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__vendedorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the vendedor model
   */
  interface vendedorFieldRefs {
    readonly id: FieldRef<"vendedor", 'Int'>
    readonly nome: FieldRef<"vendedor", 'String'>
    readonly telefone: FieldRef<"vendedor", 'String'>
    readonly createdAt: FieldRef<"vendedor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * vendedor findUnique
   */
  export type vendedorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * Filter, which vendedor to fetch.
     */
    where: vendedorWhereUniqueInput
  }

  /**
   * vendedor findUniqueOrThrow
   */
  export type vendedorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * Filter, which vendedor to fetch.
     */
    where: vendedorWhereUniqueInput
  }

  /**
   * vendedor findFirst
   */
  export type vendedorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * Filter, which vendedor to fetch.
     */
    where?: vendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendedors to fetch.
     */
    orderBy?: vendedorOrderByWithRelationInput | vendedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vendedors.
     */
    cursor?: vendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vendedors.
     */
    distinct?: VendedorScalarFieldEnum | VendedorScalarFieldEnum[]
  }

  /**
   * vendedor findFirstOrThrow
   */
  export type vendedorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * Filter, which vendedor to fetch.
     */
    where?: vendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendedors to fetch.
     */
    orderBy?: vendedorOrderByWithRelationInput | vendedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vendedors.
     */
    cursor?: vendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vendedors.
     */
    distinct?: VendedorScalarFieldEnum | VendedorScalarFieldEnum[]
  }

  /**
   * vendedor findMany
   */
  export type vendedorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * Filter, which vendedors to fetch.
     */
    where?: vendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendedors to fetch.
     */
    orderBy?: vendedorOrderByWithRelationInput | vendedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing vendedors.
     */
    cursor?: vendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendedors.
     */
    skip?: number
    distinct?: VendedorScalarFieldEnum | VendedorScalarFieldEnum[]
  }

  /**
   * vendedor create
   */
  export type vendedorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * The data needed to create a vendedor.
     */
    data: XOR<vendedorCreateInput, vendedorUncheckedCreateInput>
  }

  /**
   * vendedor createMany
   */
  export type vendedorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many vendedors.
     */
    data: vendedorCreateManyInput | vendedorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * vendedor update
   */
  export type vendedorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * The data needed to update a vendedor.
     */
    data: XOR<vendedorUpdateInput, vendedorUncheckedUpdateInput>
    /**
     * Choose, which vendedor to update.
     */
    where: vendedorWhereUniqueInput
  }

  /**
   * vendedor updateMany
   */
  export type vendedorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update vendedors.
     */
    data: XOR<vendedorUpdateManyMutationInput, vendedorUncheckedUpdateManyInput>
    /**
     * Filter which vendedors to update
     */
    where?: vendedorWhereInput
    /**
     * Limit how many vendedors to update.
     */
    limit?: number
  }

  /**
   * vendedor upsert
   */
  export type vendedorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * The filter to search for the vendedor to update in case it exists.
     */
    where: vendedorWhereUniqueInput
    /**
     * In case the vendedor found by the `where` argument doesn't exist, create a new vendedor with this data.
     */
    create: XOR<vendedorCreateInput, vendedorUncheckedCreateInput>
    /**
     * In case the vendedor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<vendedorUpdateInput, vendedorUncheckedUpdateInput>
  }

  /**
   * vendedor delete
   */
  export type vendedorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
    /**
     * Filter which vendedor to delete.
     */
    where: vendedorWhereUniqueInput
  }

  /**
   * vendedor deleteMany
   */
  export type vendedorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which vendedors to delete
     */
    where?: vendedorWhereInput
    /**
     * Limit how many vendedors to delete.
     */
    limit?: number
  }

  /**
   * vendedor without action
   */
  export type vendedorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vendedor
     */
    select?: vendedorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the vendedor
     */
    omit?: vendedorOmit<ExtArgs> | null
  }


  /**
   * Model propostaVenda
   */

  export type AggregatePropostaVenda = {
    _count: PropostaVendaCountAggregateOutputType | null
    _avg: PropostaVendaAvgAggregateOutputType | null
    _sum: PropostaVendaSumAggregateOutputType | null
    _min: PropostaVendaMinAggregateOutputType | null
    _max: PropostaVendaMaxAggregateOutputType | null
  }

  export type PropostaVendaAvgAggregateOutputType = {
    id: number | null
  }

  export type PropostaVendaSumAggregateOutputType = {
    id: number | null
  }

  export type PropostaVendaMinAggregateOutputType = {
    id: number | null
    veiculo: string | null
    nome: string | null
    telefone: string | null
    whatsapp: boolean | null
    email: string | null
    createdAt: Date | null
  }

  export type PropostaVendaMaxAggregateOutputType = {
    id: number | null
    veiculo: string | null
    nome: string | null
    telefone: string | null
    whatsapp: boolean | null
    email: string | null
    createdAt: Date | null
  }

  export type PropostaVendaCountAggregateOutputType = {
    id: number
    veiculo: number
    nome: number
    telefone: number
    whatsapp: number
    email: number
    createdAt: number
    _all: number
  }


  export type PropostaVendaAvgAggregateInputType = {
    id?: true
  }

  export type PropostaVendaSumAggregateInputType = {
    id?: true
  }

  export type PropostaVendaMinAggregateInputType = {
    id?: true
    veiculo?: true
    nome?: true
    telefone?: true
    whatsapp?: true
    email?: true
    createdAt?: true
  }

  export type PropostaVendaMaxAggregateInputType = {
    id?: true
    veiculo?: true
    nome?: true
    telefone?: true
    whatsapp?: true
    email?: true
    createdAt?: true
  }

  export type PropostaVendaCountAggregateInputType = {
    id?: true
    veiculo?: true
    nome?: true
    telefone?: true
    whatsapp?: true
    email?: true
    createdAt?: true
    _all?: true
  }

  export type PropostaVendaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which propostaVenda to aggregate.
     */
    where?: propostaVendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of propostaVendas to fetch.
     */
    orderBy?: propostaVendaOrderByWithRelationInput | propostaVendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: propostaVendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` propostaVendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` propostaVendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned propostaVendas
    **/
    _count?: true | PropostaVendaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropostaVendaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropostaVendaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropostaVendaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropostaVendaMaxAggregateInputType
  }

  export type GetPropostaVendaAggregateType<T extends PropostaVendaAggregateArgs> = {
        [P in keyof T & keyof AggregatePropostaVenda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePropostaVenda[P]>
      : GetScalarType<T[P], AggregatePropostaVenda[P]>
  }




  export type propostaVendaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: propostaVendaWhereInput
    orderBy?: propostaVendaOrderByWithAggregationInput | propostaVendaOrderByWithAggregationInput[]
    by: PropostaVendaScalarFieldEnum[] | PropostaVendaScalarFieldEnum
    having?: propostaVendaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropostaVendaCountAggregateInputType | true
    _avg?: PropostaVendaAvgAggregateInputType
    _sum?: PropostaVendaSumAggregateInputType
    _min?: PropostaVendaMinAggregateInputType
    _max?: PropostaVendaMaxAggregateInputType
  }

  export type PropostaVendaGroupByOutputType = {
    id: number
    veiculo: string
    nome: string
    telefone: string
    whatsapp: boolean
    email: string
    createdAt: Date
    _count: PropostaVendaCountAggregateOutputType | null
    _avg: PropostaVendaAvgAggregateOutputType | null
    _sum: PropostaVendaSumAggregateOutputType | null
    _min: PropostaVendaMinAggregateOutputType | null
    _max: PropostaVendaMaxAggregateOutputType | null
  }

  type GetPropostaVendaGroupByPayload<T extends propostaVendaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropostaVendaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropostaVendaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropostaVendaGroupByOutputType[P]>
            : GetScalarType<T[P], PropostaVendaGroupByOutputType[P]>
        }
      >
    >


  export type propostaVendaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    veiculo?: boolean
    nome?: boolean
    telefone?: boolean
    whatsapp?: boolean
    email?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["propostaVenda"]>



  export type propostaVendaSelectScalar = {
    id?: boolean
    veiculo?: boolean
    nome?: boolean
    telefone?: boolean
    whatsapp?: boolean
    email?: boolean
    createdAt?: boolean
  }

  export type propostaVendaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "veiculo" | "nome" | "telefone" | "whatsapp" | "email" | "createdAt", ExtArgs["result"]["propostaVenda"]>

  export type $propostaVendaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "propostaVenda"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      veiculo: string
      nome: string
      telefone: string
      whatsapp: boolean
      email: string
      createdAt: Date
    }, ExtArgs["result"]["propostaVenda"]>
    composites: {}
  }

  type propostaVendaGetPayload<S extends boolean | null | undefined | propostaVendaDefaultArgs> = $Result.GetResult<Prisma.$propostaVendaPayload, S>

  type propostaVendaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<propostaVendaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PropostaVendaCountAggregateInputType | true
    }

  export interface propostaVendaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['propostaVenda'], meta: { name: 'propostaVenda' } }
    /**
     * Find zero or one PropostaVenda that matches the filter.
     * @param {propostaVendaFindUniqueArgs} args - Arguments to find a PropostaVenda
     * @example
     * // Get one PropostaVenda
     * const propostaVenda = await prisma.propostaVenda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends propostaVendaFindUniqueArgs>(args: SelectSubset<T, propostaVendaFindUniqueArgs<ExtArgs>>): Prisma__propostaVendaClient<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PropostaVenda that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {propostaVendaFindUniqueOrThrowArgs} args - Arguments to find a PropostaVenda
     * @example
     * // Get one PropostaVenda
     * const propostaVenda = await prisma.propostaVenda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends propostaVendaFindUniqueOrThrowArgs>(args: SelectSubset<T, propostaVendaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__propostaVendaClient<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PropostaVenda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propostaVendaFindFirstArgs} args - Arguments to find a PropostaVenda
     * @example
     * // Get one PropostaVenda
     * const propostaVenda = await prisma.propostaVenda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends propostaVendaFindFirstArgs>(args?: SelectSubset<T, propostaVendaFindFirstArgs<ExtArgs>>): Prisma__propostaVendaClient<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PropostaVenda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propostaVendaFindFirstOrThrowArgs} args - Arguments to find a PropostaVenda
     * @example
     * // Get one PropostaVenda
     * const propostaVenda = await prisma.propostaVenda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends propostaVendaFindFirstOrThrowArgs>(args?: SelectSubset<T, propostaVendaFindFirstOrThrowArgs<ExtArgs>>): Prisma__propostaVendaClient<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PropostaVendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propostaVendaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PropostaVendas
     * const propostaVendas = await prisma.propostaVenda.findMany()
     * 
     * // Get first 10 PropostaVendas
     * const propostaVendas = await prisma.propostaVenda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propostaVendaWithIdOnly = await prisma.propostaVenda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends propostaVendaFindManyArgs>(args?: SelectSubset<T, propostaVendaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PropostaVenda.
     * @param {propostaVendaCreateArgs} args - Arguments to create a PropostaVenda.
     * @example
     * // Create one PropostaVenda
     * const PropostaVenda = await prisma.propostaVenda.create({
     *   data: {
     *     // ... data to create a PropostaVenda
     *   }
     * })
     * 
     */
    create<T extends propostaVendaCreateArgs>(args: SelectSubset<T, propostaVendaCreateArgs<ExtArgs>>): Prisma__propostaVendaClient<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PropostaVendas.
     * @param {propostaVendaCreateManyArgs} args - Arguments to create many PropostaVendas.
     * @example
     * // Create many PropostaVendas
     * const propostaVenda = await prisma.propostaVenda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends propostaVendaCreateManyArgs>(args?: SelectSubset<T, propostaVendaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PropostaVenda.
     * @param {propostaVendaDeleteArgs} args - Arguments to delete one PropostaVenda.
     * @example
     * // Delete one PropostaVenda
     * const PropostaVenda = await prisma.propostaVenda.delete({
     *   where: {
     *     // ... filter to delete one PropostaVenda
     *   }
     * })
     * 
     */
    delete<T extends propostaVendaDeleteArgs>(args: SelectSubset<T, propostaVendaDeleteArgs<ExtArgs>>): Prisma__propostaVendaClient<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PropostaVenda.
     * @param {propostaVendaUpdateArgs} args - Arguments to update one PropostaVenda.
     * @example
     * // Update one PropostaVenda
     * const propostaVenda = await prisma.propostaVenda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends propostaVendaUpdateArgs>(args: SelectSubset<T, propostaVendaUpdateArgs<ExtArgs>>): Prisma__propostaVendaClient<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PropostaVendas.
     * @param {propostaVendaDeleteManyArgs} args - Arguments to filter PropostaVendas to delete.
     * @example
     * // Delete a few PropostaVendas
     * const { count } = await prisma.propostaVenda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends propostaVendaDeleteManyArgs>(args?: SelectSubset<T, propostaVendaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PropostaVendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propostaVendaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PropostaVendas
     * const propostaVenda = await prisma.propostaVenda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends propostaVendaUpdateManyArgs>(args: SelectSubset<T, propostaVendaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PropostaVenda.
     * @param {propostaVendaUpsertArgs} args - Arguments to update or create a PropostaVenda.
     * @example
     * // Update or create a PropostaVenda
     * const propostaVenda = await prisma.propostaVenda.upsert({
     *   create: {
     *     // ... data to create a PropostaVenda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PropostaVenda we want to update
     *   }
     * })
     */
    upsert<T extends propostaVendaUpsertArgs>(args: SelectSubset<T, propostaVendaUpsertArgs<ExtArgs>>): Prisma__propostaVendaClient<$Result.GetResult<Prisma.$propostaVendaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PropostaVendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propostaVendaCountArgs} args - Arguments to filter PropostaVendas to count.
     * @example
     * // Count the number of PropostaVendas
     * const count = await prisma.propostaVenda.count({
     *   where: {
     *     // ... the filter for the PropostaVendas we want to count
     *   }
     * })
    **/
    count<T extends propostaVendaCountArgs>(
      args?: Subset<T, propostaVendaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropostaVendaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PropostaVenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropostaVendaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropostaVendaAggregateArgs>(args: Subset<T, PropostaVendaAggregateArgs>): Prisma.PrismaPromise<GetPropostaVendaAggregateType<T>>

    /**
     * Group by PropostaVenda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propostaVendaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends propostaVendaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: propostaVendaGroupByArgs['orderBy'] }
        : { orderBy?: propostaVendaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, propostaVendaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropostaVendaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the propostaVenda model
   */
  readonly fields: propostaVendaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for propostaVenda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__propostaVendaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the propostaVenda model
   */
  interface propostaVendaFieldRefs {
    readonly id: FieldRef<"propostaVenda", 'Int'>
    readonly veiculo: FieldRef<"propostaVenda", 'String'>
    readonly nome: FieldRef<"propostaVenda", 'String'>
    readonly telefone: FieldRef<"propostaVenda", 'String'>
    readonly whatsapp: FieldRef<"propostaVenda", 'Boolean'>
    readonly email: FieldRef<"propostaVenda", 'String'>
    readonly createdAt: FieldRef<"propostaVenda", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * propostaVenda findUnique
   */
  export type propostaVendaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * Filter, which propostaVenda to fetch.
     */
    where: propostaVendaWhereUniqueInput
  }

  /**
   * propostaVenda findUniqueOrThrow
   */
  export type propostaVendaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * Filter, which propostaVenda to fetch.
     */
    where: propostaVendaWhereUniqueInput
  }

  /**
   * propostaVenda findFirst
   */
  export type propostaVendaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * Filter, which propostaVenda to fetch.
     */
    where?: propostaVendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of propostaVendas to fetch.
     */
    orderBy?: propostaVendaOrderByWithRelationInput | propostaVendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for propostaVendas.
     */
    cursor?: propostaVendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` propostaVendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` propostaVendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of propostaVendas.
     */
    distinct?: PropostaVendaScalarFieldEnum | PropostaVendaScalarFieldEnum[]
  }

  /**
   * propostaVenda findFirstOrThrow
   */
  export type propostaVendaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * Filter, which propostaVenda to fetch.
     */
    where?: propostaVendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of propostaVendas to fetch.
     */
    orderBy?: propostaVendaOrderByWithRelationInput | propostaVendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for propostaVendas.
     */
    cursor?: propostaVendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` propostaVendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` propostaVendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of propostaVendas.
     */
    distinct?: PropostaVendaScalarFieldEnum | PropostaVendaScalarFieldEnum[]
  }

  /**
   * propostaVenda findMany
   */
  export type propostaVendaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * Filter, which propostaVendas to fetch.
     */
    where?: propostaVendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of propostaVendas to fetch.
     */
    orderBy?: propostaVendaOrderByWithRelationInput | propostaVendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing propostaVendas.
     */
    cursor?: propostaVendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` propostaVendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` propostaVendas.
     */
    skip?: number
    distinct?: PropostaVendaScalarFieldEnum | PropostaVendaScalarFieldEnum[]
  }

  /**
   * propostaVenda create
   */
  export type propostaVendaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * The data needed to create a propostaVenda.
     */
    data: XOR<propostaVendaCreateInput, propostaVendaUncheckedCreateInput>
  }

  /**
   * propostaVenda createMany
   */
  export type propostaVendaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many propostaVendas.
     */
    data: propostaVendaCreateManyInput | propostaVendaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * propostaVenda update
   */
  export type propostaVendaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * The data needed to update a propostaVenda.
     */
    data: XOR<propostaVendaUpdateInput, propostaVendaUncheckedUpdateInput>
    /**
     * Choose, which propostaVenda to update.
     */
    where: propostaVendaWhereUniqueInput
  }

  /**
   * propostaVenda updateMany
   */
  export type propostaVendaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update propostaVendas.
     */
    data: XOR<propostaVendaUpdateManyMutationInput, propostaVendaUncheckedUpdateManyInput>
    /**
     * Filter which propostaVendas to update
     */
    where?: propostaVendaWhereInput
    /**
     * Limit how many propostaVendas to update.
     */
    limit?: number
  }

  /**
   * propostaVenda upsert
   */
  export type propostaVendaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * The filter to search for the propostaVenda to update in case it exists.
     */
    where: propostaVendaWhereUniqueInput
    /**
     * In case the propostaVenda found by the `where` argument doesn't exist, create a new propostaVenda with this data.
     */
    create: XOR<propostaVendaCreateInput, propostaVendaUncheckedCreateInput>
    /**
     * In case the propostaVenda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<propostaVendaUpdateInput, propostaVendaUncheckedUpdateInput>
  }

  /**
   * propostaVenda delete
   */
  export type propostaVendaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
    /**
     * Filter which propostaVenda to delete.
     */
    where: propostaVendaWhereUniqueInput
  }

  /**
   * propostaVenda deleteMany
   */
  export type propostaVendaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which propostaVendas to delete
     */
    where?: propostaVendaWhereInput
    /**
     * Limit how many propostaVendas to delete.
     */
    limit?: number
  }

  /**
   * propostaVenda without action
   */
  export type propostaVendaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propostaVenda
     */
    select?: propostaVendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propostaVenda
     */
    omit?: propostaVendaOmit<ExtArgs> | null
  }


  /**
   * Model financiamento
   */

  export type AggregateFinanciamento = {
    _count: FinanciamentoCountAggregateOutputType | null
    _avg: FinanciamentoAvgAggregateOutputType | null
    _sum: FinanciamentoSumAggregateOutputType | null
    _min: FinanciamentoMinAggregateOutputType | null
    _max: FinanciamentoMaxAggregateOutputType | null
  }

  export type FinanciamentoAvgAggregateOutputType = {
    id: number | null
  }

  export type FinanciamentoSumAggregateOutputType = {
    id: number | null
  }

  export type FinanciamentoMinAggregateOutputType = {
    id: number | null
    veiculo: string | null
    nome: string | null
    telefone: string | null
    whatsapp: boolean | null
    email: string | null
    dataNascimento: Date | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FinanciamentoMaxAggregateOutputType = {
    id: number | null
    veiculo: string | null
    nome: string | null
    telefone: string | null
    whatsapp: boolean | null
    email: string | null
    dataNascimento: Date | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FinanciamentoCountAggregateOutputType = {
    id: number
    veiculo: number
    nome: number
    telefone: number
    whatsapp: number
    email: number
    dataNascimento: number
    cpf: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FinanciamentoAvgAggregateInputType = {
    id?: true
  }

  export type FinanciamentoSumAggregateInputType = {
    id?: true
  }

  export type FinanciamentoMinAggregateInputType = {
    id?: true
    veiculo?: true
    nome?: true
    telefone?: true
    whatsapp?: true
    email?: true
    dataNascimento?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FinanciamentoMaxAggregateInputType = {
    id?: true
    veiculo?: true
    nome?: true
    telefone?: true
    whatsapp?: true
    email?: true
    dataNascimento?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FinanciamentoCountAggregateInputType = {
    id?: true
    veiculo?: true
    nome?: true
    telefone?: true
    whatsapp?: true
    email?: true
    dataNascimento?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FinanciamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which financiamento to aggregate.
     */
    where?: financiamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of financiamentos to fetch.
     */
    orderBy?: financiamentoOrderByWithRelationInput | financiamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: financiamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` financiamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` financiamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned financiamentos
    **/
    _count?: true | FinanciamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinanciamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinanciamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinanciamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinanciamentoMaxAggregateInputType
  }

  export type GetFinanciamentoAggregateType<T extends FinanciamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateFinanciamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinanciamento[P]>
      : GetScalarType<T[P], AggregateFinanciamento[P]>
  }




  export type financiamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: financiamentoWhereInput
    orderBy?: financiamentoOrderByWithAggregationInput | financiamentoOrderByWithAggregationInput[]
    by: FinanciamentoScalarFieldEnum[] | FinanciamentoScalarFieldEnum
    having?: financiamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinanciamentoCountAggregateInputType | true
    _avg?: FinanciamentoAvgAggregateInputType
    _sum?: FinanciamentoSumAggregateInputType
    _min?: FinanciamentoMinAggregateInputType
    _max?: FinanciamentoMaxAggregateInputType
  }

  export type FinanciamentoGroupByOutputType = {
    id: number
    veiculo: string
    nome: string
    telefone: string
    whatsapp: boolean
    email: string
    dataNascimento: Date | null
    cpf: string | null
    createdAt: Date
    updatedAt: Date
    _count: FinanciamentoCountAggregateOutputType | null
    _avg: FinanciamentoAvgAggregateOutputType | null
    _sum: FinanciamentoSumAggregateOutputType | null
    _min: FinanciamentoMinAggregateOutputType | null
    _max: FinanciamentoMaxAggregateOutputType | null
  }

  type GetFinanciamentoGroupByPayload<T extends financiamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinanciamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinanciamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinanciamentoGroupByOutputType[P]>
            : GetScalarType<T[P], FinanciamentoGroupByOutputType[P]>
        }
      >
    >


  export type financiamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    veiculo?: boolean
    nome?: boolean
    telefone?: boolean
    whatsapp?: boolean
    email?: boolean
    dataNascimento?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["financiamento"]>



  export type financiamentoSelectScalar = {
    id?: boolean
    veiculo?: boolean
    nome?: boolean
    telefone?: boolean
    whatsapp?: boolean
    email?: boolean
    dataNascimento?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type financiamentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "veiculo" | "nome" | "telefone" | "whatsapp" | "email" | "dataNascimento" | "cpf" | "createdAt" | "updatedAt", ExtArgs["result"]["financiamento"]>

  export type $financiamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "financiamento"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      veiculo: string
      nome: string
      telefone: string
      whatsapp: boolean
      email: string
      dataNascimento: Date | null
      cpf: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["financiamento"]>
    composites: {}
  }

  type financiamentoGetPayload<S extends boolean | null | undefined | financiamentoDefaultArgs> = $Result.GetResult<Prisma.$financiamentoPayload, S>

  type financiamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<financiamentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinanciamentoCountAggregateInputType | true
    }

  export interface financiamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['financiamento'], meta: { name: 'financiamento' } }
    /**
     * Find zero or one Financiamento that matches the filter.
     * @param {financiamentoFindUniqueArgs} args - Arguments to find a Financiamento
     * @example
     * // Get one Financiamento
     * const financiamento = await prisma.financiamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends financiamentoFindUniqueArgs>(args: SelectSubset<T, financiamentoFindUniqueArgs<ExtArgs>>): Prisma__financiamentoClient<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Financiamento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {financiamentoFindUniqueOrThrowArgs} args - Arguments to find a Financiamento
     * @example
     * // Get one Financiamento
     * const financiamento = await prisma.financiamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends financiamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, financiamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__financiamentoClient<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Financiamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {financiamentoFindFirstArgs} args - Arguments to find a Financiamento
     * @example
     * // Get one Financiamento
     * const financiamento = await prisma.financiamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends financiamentoFindFirstArgs>(args?: SelectSubset<T, financiamentoFindFirstArgs<ExtArgs>>): Prisma__financiamentoClient<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Financiamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {financiamentoFindFirstOrThrowArgs} args - Arguments to find a Financiamento
     * @example
     * // Get one Financiamento
     * const financiamento = await prisma.financiamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends financiamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, financiamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__financiamentoClient<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Financiamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {financiamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Financiamentos
     * const financiamentos = await prisma.financiamento.findMany()
     * 
     * // Get first 10 Financiamentos
     * const financiamentos = await prisma.financiamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const financiamentoWithIdOnly = await prisma.financiamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends financiamentoFindManyArgs>(args?: SelectSubset<T, financiamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Financiamento.
     * @param {financiamentoCreateArgs} args - Arguments to create a Financiamento.
     * @example
     * // Create one Financiamento
     * const Financiamento = await prisma.financiamento.create({
     *   data: {
     *     // ... data to create a Financiamento
     *   }
     * })
     * 
     */
    create<T extends financiamentoCreateArgs>(args: SelectSubset<T, financiamentoCreateArgs<ExtArgs>>): Prisma__financiamentoClient<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Financiamentos.
     * @param {financiamentoCreateManyArgs} args - Arguments to create many Financiamentos.
     * @example
     * // Create many Financiamentos
     * const financiamento = await prisma.financiamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends financiamentoCreateManyArgs>(args?: SelectSubset<T, financiamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Financiamento.
     * @param {financiamentoDeleteArgs} args - Arguments to delete one Financiamento.
     * @example
     * // Delete one Financiamento
     * const Financiamento = await prisma.financiamento.delete({
     *   where: {
     *     // ... filter to delete one Financiamento
     *   }
     * })
     * 
     */
    delete<T extends financiamentoDeleteArgs>(args: SelectSubset<T, financiamentoDeleteArgs<ExtArgs>>): Prisma__financiamentoClient<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Financiamento.
     * @param {financiamentoUpdateArgs} args - Arguments to update one Financiamento.
     * @example
     * // Update one Financiamento
     * const financiamento = await prisma.financiamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends financiamentoUpdateArgs>(args: SelectSubset<T, financiamentoUpdateArgs<ExtArgs>>): Prisma__financiamentoClient<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Financiamentos.
     * @param {financiamentoDeleteManyArgs} args - Arguments to filter Financiamentos to delete.
     * @example
     * // Delete a few Financiamentos
     * const { count } = await prisma.financiamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends financiamentoDeleteManyArgs>(args?: SelectSubset<T, financiamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Financiamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {financiamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Financiamentos
     * const financiamento = await prisma.financiamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends financiamentoUpdateManyArgs>(args: SelectSubset<T, financiamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Financiamento.
     * @param {financiamentoUpsertArgs} args - Arguments to update or create a Financiamento.
     * @example
     * // Update or create a Financiamento
     * const financiamento = await prisma.financiamento.upsert({
     *   create: {
     *     // ... data to create a Financiamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Financiamento we want to update
     *   }
     * })
     */
    upsert<T extends financiamentoUpsertArgs>(args: SelectSubset<T, financiamentoUpsertArgs<ExtArgs>>): Prisma__financiamentoClient<$Result.GetResult<Prisma.$financiamentoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Financiamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {financiamentoCountArgs} args - Arguments to filter Financiamentos to count.
     * @example
     * // Count the number of Financiamentos
     * const count = await prisma.financiamento.count({
     *   where: {
     *     // ... the filter for the Financiamentos we want to count
     *   }
     * })
    **/
    count<T extends financiamentoCountArgs>(
      args?: Subset<T, financiamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinanciamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Financiamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinanciamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinanciamentoAggregateArgs>(args: Subset<T, FinanciamentoAggregateArgs>): Prisma.PrismaPromise<GetFinanciamentoAggregateType<T>>

    /**
     * Group by Financiamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {financiamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends financiamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: financiamentoGroupByArgs['orderBy'] }
        : { orderBy?: financiamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, financiamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinanciamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the financiamento model
   */
  readonly fields: financiamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for financiamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__financiamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the financiamento model
   */
  interface financiamentoFieldRefs {
    readonly id: FieldRef<"financiamento", 'Int'>
    readonly veiculo: FieldRef<"financiamento", 'String'>
    readonly nome: FieldRef<"financiamento", 'String'>
    readonly telefone: FieldRef<"financiamento", 'String'>
    readonly whatsapp: FieldRef<"financiamento", 'Boolean'>
    readonly email: FieldRef<"financiamento", 'String'>
    readonly dataNascimento: FieldRef<"financiamento", 'DateTime'>
    readonly cpf: FieldRef<"financiamento", 'String'>
    readonly createdAt: FieldRef<"financiamento", 'DateTime'>
    readonly updatedAt: FieldRef<"financiamento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * financiamento findUnique
   */
  export type financiamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * Filter, which financiamento to fetch.
     */
    where: financiamentoWhereUniqueInput
  }

  /**
   * financiamento findUniqueOrThrow
   */
  export type financiamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * Filter, which financiamento to fetch.
     */
    where: financiamentoWhereUniqueInput
  }

  /**
   * financiamento findFirst
   */
  export type financiamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * Filter, which financiamento to fetch.
     */
    where?: financiamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of financiamentos to fetch.
     */
    orderBy?: financiamentoOrderByWithRelationInput | financiamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for financiamentos.
     */
    cursor?: financiamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` financiamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` financiamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of financiamentos.
     */
    distinct?: FinanciamentoScalarFieldEnum | FinanciamentoScalarFieldEnum[]
  }

  /**
   * financiamento findFirstOrThrow
   */
  export type financiamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * Filter, which financiamento to fetch.
     */
    where?: financiamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of financiamentos to fetch.
     */
    orderBy?: financiamentoOrderByWithRelationInput | financiamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for financiamentos.
     */
    cursor?: financiamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` financiamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` financiamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of financiamentos.
     */
    distinct?: FinanciamentoScalarFieldEnum | FinanciamentoScalarFieldEnum[]
  }

  /**
   * financiamento findMany
   */
  export type financiamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * Filter, which financiamentos to fetch.
     */
    where?: financiamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of financiamentos to fetch.
     */
    orderBy?: financiamentoOrderByWithRelationInput | financiamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing financiamentos.
     */
    cursor?: financiamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` financiamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` financiamentos.
     */
    skip?: number
    distinct?: FinanciamentoScalarFieldEnum | FinanciamentoScalarFieldEnum[]
  }

  /**
   * financiamento create
   */
  export type financiamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * The data needed to create a financiamento.
     */
    data: XOR<financiamentoCreateInput, financiamentoUncheckedCreateInput>
  }

  /**
   * financiamento createMany
   */
  export type financiamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many financiamentos.
     */
    data: financiamentoCreateManyInput | financiamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * financiamento update
   */
  export type financiamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * The data needed to update a financiamento.
     */
    data: XOR<financiamentoUpdateInput, financiamentoUncheckedUpdateInput>
    /**
     * Choose, which financiamento to update.
     */
    where: financiamentoWhereUniqueInput
  }

  /**
   * financiamento updateMany
   */
  export type financiamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update financiamentos.
     */
    data: XOR<financiamentoUpdateManyMutationInput, financiamentoUncheckedUpdateManyInput>
    /**
     * Filter which financiamentos to update
     */
    where?: financiamentoWhereInput
    /**
     * Limit how many financiamentos to update.
     */
    limit?: number
  }

  /**
   * financiamento upsert
   */
  export type financiamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * The filter to search for the financiamento to update in case it exists.
     */
    where: financiamentoWhereUniqueInput
    /**
     * In case the financiamento found by the `where` argument doesn't exist, create a new financiamento with this data.
     */
    create: XOR<financiamentoCreateInput, financiamentoUncheckedCreateInput>
    /**
     * In case the financiamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<financiamentoUpdateInput, financiamentoUncheckedUpdateInput>
  }

  /**
   * financiamento delete
   */
  export type financiamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
    /**
     * Filter which financiamento to delete.
     */
    where: financiamentoWhereUniqueInput
  }

  /**
   * financiamento deleteMany
   */
  export type financiamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which financiamentos to delete
     */
    where?: financiamentoWhereInput
    /**
     * Limit how many financiamentos to delete.
     */
    limit?: number
  }

  /**
   * financiamento without action
   */
  export type financiamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the financiamento
     */
    select?: financiamentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the financiamento
     */
    omit?: financiamentoOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CarroScalarFieldEnum: {
    id: 'id',
    modelo: 'modelo',
    ano: 'ano',
    preco: 'preco',
    quilometragem: 'quilometragem',
    cor: 'cor',
    combustivel: 'combustivel',
    cambio: 'cambio',
    portas: 'portas',
    descricao: 'descricao',
    imagem: 'imagem',
    destaque: 'destaque',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    marcaId: 'marcaId'
  };

  export type CarroScalarFieldEnum = (typeof CarroScalarFieldEnum)[keyof typeof CarroScalarFieldEnum]


  export const MarcaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    logo: 'logo'
  };

  export type MarcaScalarFieldEnum = (typeof MarcaScalarFieldEnum)[keyof typeof MarcaScalarFieldEnum]


  export const ImagemScalarFieldEnum: {
    id: 'id',
    url: 'url',
    carroId: 'carroId'
  };

  export type ImagemScalarFieldEnum = (typeof ImagemScalarFieldEnum)[keyof typeof ImagemScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VendedorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    telefone: 'telefone',
    createdAt: 'createdAt'
  };

  export type VendedorScalarFieldEnum = (typeof VendedorScalarFieldEnum)[keyof typeof VendedorScalarFieldEnum]


  export const PropostaVendaScalarFieldEnum: {
    id: 'id',
    veiculo: 'veiculo',
    nome: 'nome',
    telefone: 'telefone',
    whatsapp: 'whatsapp',
    email: 'email',
    createdAt: 'createdAt'
  };

  export type PropostaVendaScalarFieldEnum = (typeof PropostaVendaScalarFieldEnum)[keyof typeof PropostaVendaScalarFieldEnum]


  export const FinanciamentoScalarFieldEnum: {
    id: 'id',
    veiculo: 'veiculo',
    nome: 'nome',
    telefone: 'telefone',
    whatsapp: 'whatsapp',
    email: 'email',
    dataNascimento: 'dataNascimento',
    cpf: 'cpf',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FinanciamentoScalarFieldEnum = (typeof FinanciamentoScalarFieldEnum)[keyof typeof FinanciamentoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const carroOrderByRelevanceFieldEnum: {
    modelo: 'modelo',
    cor: 'cor',
    combustivel: 'combustivel',
    cambio: 'cambio',
    descricao: 'descricao',
    imagem: 'imagem'
  };

  export type carroOrderByRelevanceFieldEnum = (typeof carroOrderByRelevanceFieldEnum)[keyof typeof carroOrderByRelevanceFieldEnum]


  export const marcaOrderByRelevanceFieldEnum: {
    nome: 'nome',
    logo: 'logo'
  };

  export type marcaOrderByRelevanceFieldEnum = (typeof marcaOrderByRelevanceFieldEnum)[keyof typeof marcaOrderByRelevanceFieldEnum]


  export const imagemOrderByRelevanceFieldEnum: {
    url: 'url'
  };

  export type imagemOrderByRelevanceFieldEnum = (typeof imagemOrderByRelevanceFieldEnum)[keyof typeof imagemOrderByRelevanceFieldEnum]


  export const userOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    password: 'password'
  };

  export type userOrderByRelevanceFieldEnum = (typeof userOrderByRelevanceFieldEnum)[keyof typeof userOrderByRelevanceFieldEnum]


  export const vendedorOrderByRelevanceFieldEnum: {
    nome: 'nome',
    telefone: 'telefone'
  };

  export type vendedorOrderByRelevanceFieldEnum = (typeof vendedorOrderByRelevanceFieldEnum)[keyof typeof vendedorOrderByRelevanceFieldEnum]


  export const propostaVendaOrderByRelevanceFieldEnum: {
    veiculo: 'veiculo',
    nome: 'nome',
    telefone: 'telefone',
    email: 'email'
  };

  export type propostaVendaOrderByRelevanceFieldEnum = (typeof propostaVendaOrderByRelevanceFieldEnum)[keyof typeof propostaVendaOrderByRelevanceFieldEnum]


  export const financiamentoOrderByRelevanceFieldEnum: {
    veiculo: 'veiculo',
    nome: 'nome',
    telefone: 'telefone',
    email: 'email',
    cpf: 'cpf'
  };

  export type financiamentoOrderByRelevanceFieldEnum = (typeof financiamentoOrderByRelevanceFieldEnum)[keyof typeof financiamentoOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'user_role'
   */
  export type Enumuser_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'user_role'>
    
  /**
   * Deep Input Types
   */


  export type carroWhereInput = {
    AND?: carroWhereInput | carroWhereInput[]
    OR?: carroWhereInput[]
    NOT?: carroWhereInput | carroWhereInput[]
    id?: IntFilter<"carro"> | number
    modelo?: StringFilter<"carro"> | string
    ano?: IntFilter<"carro"> | number
    preco?: FloatFilter<"carro"> | number
    quilometragem?: IntNullableFilter<"carro"> | number | null
    cor?: StringNullableFilter<"carro"> | string | null
    combustivel?: StringNullableFilter<"carro"> | string | null
    cambio?: StringNullableFilter<"carro"> | string | null
    portas?: IntNullableFilter<"carro"> | number | null
    descricao?: StringNullableFilter<"carro"> | string | null
    imagem?: StringNullableFilter<"carro"> | string | null
    destaque?: BoolFilter<"carro"> | boolean
    createdAt?: DateTimeFilter<"carro"> | Date | string
    updatedAt?: DateTimeFilter<"carro"> | Date | string
    marcaId?: IntFilter<"carro"> | number
    marca?: XOR<MarcaScalarRelationFilter, marcaWhereInput>
    imagens?: ImagemListRelationFilter
  }

  export type carroOrderByWithRelationInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    preco?: SortOrder
    quilometragem?: SortOrderInput | SortOrder
    cor?: SortOrderInput | SortOrder
    combustivel?: SortOrderInput | SortOrder
    cambio?: SortOrderInput | SortOrder
    portas?: SortOrderInput | SortOrder
    descricao?: SortOrderInput | SortOrder
    imagem?: SortOrderInput | SortOrder
    destaque?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    marcaId?: SortOrder
    marca?: marcaOrderByWithRelationInput
    imagens?: imagemOrderByRelationAggregateInput
    _relevance?: carroOrderByRelevanceInput
  }

  export type carroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: carroWhereInput | carroWhereInput[]
    OR?: carroWhereInput[]
    NOT?: carroWhereInput | carroWhereInput[]
    modelo?: StringFilter<"carro"> | string
    ano?: IntFilter<"carro"> | number
    preco?: FloatFilter<"carro"> | number
    quilometragem?: IntNullableFilter<"carro"> | number | null
    cor?: StringNullableFilter<"carro"> | string | null
    combustivel?: StringNullableFilter<"carro"> | string | null
    cambio?: StringNullableFilter<"carro"> | string | null
    portas?: IntNullableFilter<"carro"> | number | null
    descricao?: StringNullableFilter<"carro"> | string | null
    imagem?: StringNullableFilter<"carro"> | string | null
    destaque?: BoolFilter<"carro"> | boolean
    createdAt?: DateTimeFilter<"carro"> | Date | string
    updatedAt?: DateTimeFilter<"carro"> | Date | string
    marcaId?: IntFilter<"carro"> | number
    marca?: XOR<MarcaScalarRelationFilter, marcaWhereInput>
    imagens?: ImagemListRelationFilter
  }, "id">

  export type carroOrderByWithAggregationInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    preco?: SortOrder
    quilometragem?: SortOrderInput | SortOrder
    cor?: SortOrderInput | SortOrder
    combustivel?: SortOrderInput | SortOrder
    cambio?: SortOrderInput | SortOrder
    portas?: SortOrderInput | SortOrder
    descricao?: SortOrderInput | SortOrder
    imagem?: SortOrderInput | SortOrder
    destaque?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    marcaId?: SortOrder
    _count?: carroCountOrderByAggregateInput
    _avg?: carroAvgOrderByAggregateInput
    _max?: carroMaxOrderByAggregateInput
    _min?: carroMinOrderByAggregateInput
    _sum?: carroSumOrderByAggregateInput
  }

  export type carroScalarWhereWithAggregatesInput = {
    AND?: carroScalarWhereWithAggregatesInput | carroScalarWhereWithAggregatesInput[]
    OR?: carroScalarWhereWithAggregatesInput[]
    NOT?: carroScalarWhereWithAggregatesInput | carroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"carro"> | number
    modelo?: StringWithAggregatesFilter<"carro"> | string
    ano?: IntWithAggregatesFilter<"carro"> | number
    preco?: FloatWithAggregatesFilter<"carro"> | number
    quilometragem?: IntNullableWithAggregatesFilter<"carro"> | number | null
    cor?: StringNullableWithAggregatesFilter<"carro"> | string | null
    combustivel?: StringNullableWithAggregatesFilter<"carro"> | string | null
    cambio?: StringNullableWithAggregatesFilter<"carro"> | string | null
    portas?: IntNullableWithAggregatesFilter<"carro"> | number | null
    descricao?: StringNullableWithAggregatesFilter<"carro"> | string | null
    imagem?: StringNullableWithAggregatesFilter<"carro"> | string | null
    destaque?: BoolWithAggregatesFilter<"carro"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"carro"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"carro"> | Date | string
    marcaId?: IntWithAggregatesFilter<"carro"> | number
  }

  export type marcaWhereInput = {
    AND?: marcaWhereInput | marcaWhereInput[]
    OR?: marcaWhereInput[]
    NOT?: marcaWhereInput | marcaWhereInput[]
    id?: IntFilter<"marca"> | number
    nome?: StringFilter<"marca"> | string
    logo?: StringFilter<"marca"> | string
    carros?: CarroListRelationFilter
  }

  export type marcaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    logo?: SortOrder
    carros?: carroOrderByRelationAggregateInput
    _relevance?: marcaOrderByRelevanceInput
  }

  export type marcaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: marcaWhereInput | marcaWhereInput[]
    OR?: marcaWhereInput[]
    NOT?: marcaWhereInput | marcaWhereInput[]
    logo?: StringFilter<"marca"> | string
    carros?: CarroListRelationFilter
  }, "id" | "nome">

  export type marcaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    logo?: SortOrder
    _count?: marcaCountOrderByAggregateInput
    _avg?: marcaAvgOrderByAggregateInput
    _max?: marcaMaxOrderByAggregateInput
    _min?: marcaMinOrderByAggregateInput
    _sum?: marcaSumOrderByAggregateInput
  }

  export type marcaScalarWhereWithAggregatesInput = {
    AND?: marcaScalarWhereWithAggregatesInput | marcaScalarWhereWithAggregatesInput[]
    OR?: marcaScalarWhereWithAggregatesInput[]
    NOT?: marcaScalarWhereWithAggregatesInput | marcaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"marca"> | number
    nome?: StringWithAggregatesFilter<"marca"> | string
    logo?: StringWithAggregatesFilter<"marca"> | string
  }

  export type imagemWhereInput = {
    AND?: imagemWhereInput | imagemWhereInput[]
    OR?: imagemWhereInput[]
    NOT?: imagemWhereInput | imagemWhereInput[]
    id?: IntFilter<"imagem"> | number
    url?: StringFilter<"imagem"> | string
    carroId?: IntFilter<"imagem"> | number
    carro?: XOR<CarroScalarRelationFilter, carroWhereInput>
  }

  export type imagemOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    carroId?: SortOrder
    carro?: carroOrderByWithRelationInput
    _relevance?: imagemOrderByRelevanceInput
  }

  export type imagemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: imagemWhereInput | imagemWhereInput[]
    OR?: imagemWhereInput[]
    NOT?: imagemWhereInput | imagemWhereInput[]
    url?: StringFilter<"imagem"> | string
    carroId?: IntFilter<"imagem"> | number
    carro?: XOR<CarroScalarRelationFilter, carroWhereInput>
  }, "id">

  export type imagemOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    carroId?: SortOrder
    _count?: imagemCountOrderByAggregateInput
    _avg?: imagemAvgOrderByAggregateInput
    _max?: imagemMaxOrderByAggregateInput
    _min?: imagemMinOrderByAggregateInput
    _sum?: imagemSumOrderByAggregateInput
  }

  export type imagemScalarWhereWithAggregatesInput = {
    AND?: imagemScalarWhereWithAggregatesInput | imagemScalarWhereWithAggregatesInput[]
    OR?: imagemScalarWhereWithAggregatesInput[]
    NOT?: imagemScalarWhereWithAggregatesInput | imagemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"imagem"> | number
    url?: StringWithAggregatesFilter<"imagem"> | string
    carroId?: IntWithAggregatesFilter<"imagem"> | number
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    name?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    role?: Enumuser_roleFilter<"user"> | $Enums.user_role
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: userOrderByRelevanceInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    name?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    role?: Enumuser_roleFilter<"user"> | $Enums.user_role
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    name?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    role?: Enumuser_roleWithAggregatesFilter<"user"> | $Enums.user_role
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type vendedorWhereInput = {
    AND?: vendedorWhereInput | vendedorWhereInput[]
    OR?: vendedorWhereInput[]
    NOT?: vendedorWhereInput | vendedorWhereInput[]
    id?: IntFilter<"vendedor"> | number
    nome?: StringFilter<"vendedor"> | string
    telefone?: StringFilter<"vendedor"> | string
    createdAt?: DateTimeFilter<"vendedor"> | Date | string
  }

  export type vendedorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    createdAt?: SortOrder
    _relevance?: vendedorOrderByRelevanceInput
  }

  export type vendedorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    telefone?: string
    AND?: vendedorWhereInput | vendedorWhereInput[]
    OR?: vendedorWhereInput[]
    NOT?: vendedorWhereInput | vendedorWhereInput[]
    nome?: StringFilter<"vendedor"> | string
    createdAt?: DateTimeFilter<"vendedor"> | Date | string
  }, "id" | "telefone">

  export type vendedorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    createdAt?: SortOrder
    _count?: vendedorCountOrderByAggregateInput
    _avg?: vendedorAvgOrderByAggregateInput
    _max?: vendedorMaxOrderByAggregateInput
    _min?: vendedorMinOrderByAggregateInput
    _sum?: vendedorSumOrderByAggregateInput
  }

  export type vendedorScalarWhereWithAggregatesInput = {
    AND?: vendedorScalarWhereWithAggregatesInput | vendedorScalarWhereWithAggregatesInput[]
    OR?: vendedorScalarWhereWithAggregatesInput[]
    NOT?: vendedorScalarWhereWithAggregatesInput | vendedorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"vendedor"> | number
    nome?: StringWithAggregatesFilter<"vendedor"> | string
    telefone?: StringWithAggregatesFilter<"vendedor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"vendedor"> | Date | string
  }

  export type propostaVendaWhereInput = {
    AND?: propostaVendaWhereInput | propostaVendaWhereInput[]
    OR?: propostaVendaWhereInput[]
    NOT?: propostaVendaWhereInput | propostaVendaWhereInput[]
    id?: IntFilter<"propostaVenda"> | number
    veiculo?: StringFilter<"propostaVenda"> | string
    nome?: StringFilter<"propostaVenda"> | string
    telefone?: StringFilter<"propostaVenda"> | string
    whatsapp?: BoolFilter<"propostaVenda"> | boolean
    email?: StringFilter<"propostaVenda"> | string
    createdAt?: DateTimeFilter<"propostaVenda"> | Date | string
  }

  export type propostaVendaOrderByWithRelationInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    _relevance?: propostaVendaOrderByRelevanceInput
  }

  export type propostaVendaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: propostaVendaWhereInput | propostaVendaWhereInput[]
    OR?: propostaVendaWhereInput[]
    NOT?: propostaVendaWhereInput | propostaVendaWhereInput[]
    veiculo?: StringFilter<"propostaVenda"> | string
    nome?: StringFilter<"propostaVenda"> | string
    telefone?: StringFilter<"propostaVenda"> | string
    whatsapp?: BoolFilter<"propostaVenda"> | boolean
    email?: StringFilter<"propostaVenda"> | string
    createdAt?: DateTimeFilter<"propostaVenda"> | Date | string
  }, "id">

  export type propostaVendaOrderByWithAggregationInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    _count?: propostaVendaCountOrderByAggregateInput
    _avg?: propostaVendaAvgOrderByAggregateInput
    _max?: propostaVendaMaxOrderByAggregateInput
    _min?: propostaVendaMinOrderByAggregateInput
    _sum?: propostaVendaSumOrderByAggregateInput
  }

  export type propostaVendaScalarWhereWithAggregatesInput = {
    AND?: propostaVendaScalarWhereWithAggregatesInput | propostaVendaScalarWhereWithAggregatesInput[]
    OR?: propostaVendaScalarWhereWithAggregatesInput[]
    NOT?: propostaVendaScalarWhereWithAggregatesInput | propostaVendaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"propostaVenda"> | number
    veiculo?: StringWithAggregatesFilter<"propostaVenda"> | string
    nome?: StringWithAggregatesFilter<"propostaVenda"> | string
    telefone?: StringWithAggregatesFilter<"propostaVenda"> | string
    whatsapp?: BoolWithAggregatesFilter<"propostaVenda"> | boolean
    email?: StringWithAggregatesFilter<"propostaVenda"> | string
    createdAt?: DateTimeWithAggregatesFilter<"propostaVenda"> | Date | string
  }

  export type financiamentoWhereInput = {
    AND?: financiamentoWhereInput | financiamentoWhereInput[]
    OR?: financiamentoWhereInput[]
    NOT?: financiamentoWhereInput | financiamentoWhereInput[]
    id?: IntFilter<"financiamento"> | number
    veiculo?: StringFilter<"financiamento"> | string
    nome?: StringFilter<"financiamento"> | string
    telefone?: StringFilter<"financiamento"> | string
    whatsapp?: BoolFilter<"financiamento"> | boolean
    email?: StringFilter<"financiamento"> | string
    dataNascimento?: DateTimeNullableFilter<"financiamento"> | Date | string | null
    cpf?: StringNullableFilter<"financiamento"> | string | null
    createdAt?: DateTimeFilter<"financiamento"> | Date | string
    updatedAt?: DateTimeFilter<"financiamento"> | Date | string
  }

  export type financiamentoOrderByWithRelationInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    dataNascimento?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: financiamentoOrderByRelevanceInput
  }

  export type financiamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: financiamentoWhereInput | financiamentoWhereInput[]
    OR?: financiamentoWhereInput[]
    NOT?: financiamentoWhereInput | financiamentoWhereInput[]
    veiculo?: StringFilter<"financiamento"> | string
    nome?: StringFilter<"financiamento"> | string
    telefone?: StringFilter<"financiamento"> | string
    whatsapp?: BoolFilter<"financiamento"> | boolean
    email?: StringFilter<"financiamento"> | string
    dataNascimento?: DateTimeNullableFilter<"financiamento"> | Date | string | null
    cpf?: StringNullableFilter<"financiamento"> | string | null
    createdAt?: DateTimeFilter<"financiamento"> | Date | string
    updatedAt?: DateTimeFilter<"financiamento"> | Date | string
  }, "id">

  export type financiamentoOrderByWithAggregationInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    dataNascimento?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: financiamentoCountOrderByAggregateInput
    _avg?: financiamentoAvgOrderByAggregateInput
    _max?: financiamentoMaxOrderByAggregateInput
    _min?: financiamentoMinOrderByAggregateInput
    _sum?: financiamentoSumOrderByAggregateInput
  }

  export type financiamentoScalarWhereWithAggregatesInput = {
    AND?: financiamentoScalarWhereWithAggregatesInput | financiamentoScalarWhereWithAggregatesInput[]
    OR?: financiamentoScalarWhereWithAggregatesInput[]
    NOT?: financiamentoScalarWhereWithAggregatesInput | financiamentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"financiamento"> | number
    veiculo?: StringWithAggregatesFilter<"financiamento"> | string
    nome?: StringWithAggregatesFilter<"financiamento"> | string
    telefone?: StringWithAggregatesFilter<"financiamento"> | string
    whatsapp?: BoolWithAggregatesFilter<"financiamento"> | boolean
    email?: StringWithAggregatesFilter<"financiamento"> | string
    dataNascimento?: DateTimeNullableWithAggregatesFilter<"financiamento"> | Date | string | null
    cpf?: StringNullableWithAggregatesFilter<"financiamento"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"financiamento"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"financiamento"> | Date | string
  }

  export type carroCreateInput = {
    modelo: string
    ano: number
    preco: number
    quilometragem?: number | null
    cor?: string | null
    combustivel?: string | null
    cambio?: string | null
    portas?: number | null
    descricao?: string | null
    imagem?: string | null
    destaque?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    marca: marcaCreateNestedOneWithoutCarrosInput
    imagens?: imagemCreateNestedManyWithoutCarroInput
  }

  export type carroUncheckedCreateInput = {
    id?: number
    modelo: string
    ano: number
    preco: number
    quilometragem?: number | null
    cor?: string | null
    combustivel?: string | null
    cambio?: string | null
    portas?: number | null
    descricao?: string | null
    imagem?: string | null
    destaque?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    marcaId: number
    imagens?: imagemUncheckedCreateNestedManyWithoutCarroInput
  }

  export type carroUpdateInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    marca?: marcaUpdateOneRequiredWithoutCarrosNestedInput
    imagens?: imagemUpdateManyWithoutCarroNestedInput
  }

  export type carroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    marcaId?: IntFieldUpdateOperationsInput | number
    imagens?: imagemUncheckedUpdateManyWithoutCarroNestedInput
  }

  export type carroCreateManyInput = {
    id?: number
    modelo: string
    ano: number
    preco: number
    quilometragem?: number | null
    cor?: string | null
    combustivel?: string | null
    cambio?: string | null
    portas?: number | null
    descricao?: string | null
    imagem?: string | null
    destaque?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    marcaId: number
  }

  export type carroUpdateManyMutationInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type carroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    marcaId?: IntFieldUpdateOperationsInput | number
  }

  export type marcaCreateInput = {
    nome: string
    logo: string
    carros?: carroCreateNestedManyWithoutMarcaInput
  }

  export type marcaUncheckedCreateInput = {
    id?: number
    nome: string
    logo: string
    carros?: carroUncheckedCreateNestedManyWithoutMarcaInput
  }

  export type marcaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    carros?: carroUpdateManyWithoutMarcaNestedInput
  }

  export type marcaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    carros?: carroUncheckedUpdateManyWithoutMarcaNestedInput
  }

  export type marcaCreateManyInput = {
    id?: number
    nome: string
    logo: string
  }

  export type marcaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type marcaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type imagemCreateInput = {
    url: string
    carro: carroCreateNestedOneWithoutImagensInput
  }

  export type imagemUncheckedCreateInput = {
    id?: number
    url: string
    carroId: number
  }

  export type imagemUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    carro?: carroUpdateOneRequiredWithoutImagensNestedInput
  }

  export type imagemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    carroId?: IntFieldUpdateOperationsInput | number
  }

  export type imagemCreateManyInput = {
    id?: number
    url: string
    carroId: number
  }

  export type imagemUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type imagemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    carroId?: IntFieldUpdateOperationsInput | number
  }

  export type userCreateInput = {
    name: string
    email: string
    password: string
    role?: $Enums.user_role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.user_role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.user_role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumuser_roleFieldUpdateOperationsInput | $Enums.user_role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type vendedorCreateInput = {
    nome: string
    telefone: string
    createdAt?: Date | string
  }

  export type vendedorUncheckedCreateInput = {
    id?: number
    nome: string
    telefone: string
    createdAt?: Date | string
  }

  export type vendedorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type vendedorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type vendedorCreateManyInput = {
    id?: number
    nome: string
    telefone: string
    createdAt?: Date | string
  }

  export type vendedorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type vendedorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propostaVendaCreateInput = {
    veiculo: string
    nome: string
    telefone: string
    whatsapp?: boolean
    email: string
    createdAt?: Date | string
  }

  export type propostaVendaUncheckedCreateInput = {
    id?: number
    veiculo: string
    nome: string
    telefone: string
    whatsapp?: boolean
    email: string
    createdAt?: Date | string
  }

  export type propostaVendaUpdateInput = {
    veiculo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propostaVendaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    veiculo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propostaVendaCreateManyInput = {
    id?: number
    veiculo: string
    nome: string
    telefone: string
    whatsapp?: boolean
    email: string
    createdAt?: Date | string
  }

  export type propostaVendaUpdateManyMutationInput = {
    veiculo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propostaVendaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    veiculo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type financiamentoCreateInput = {
    veiculo: string
    nome: string
    telefone: string
    whatsapp?: boolean
    email: string
    dataNascimento?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type financiamentoUncheckedCreateInput = {
    id?: number
    veiculo: string
    nome: string
    telefone: string
    whatsapp?: boolean
    email: string
    dataNascimento?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type financiamentoUpdateInput = {
    veiculo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type financiamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    veiculo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type financiamentoCreateManyInput = {
    id?: number
    veiculo: string
    nome: string
    telefone: string
    whatsapp?: boolean
    email: string
    dataNascimento?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type financiamentoUpdateManyMutationInput = {
    veiculo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type financiamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    veiculo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MarcaScalarRelationFilter = {
    is?: marcaWhereInput
    isNot?: marcaWhereInput
  }

  export type ImagemListRelationFilter = {
    every?: imagemWhereInput
    some?: imagemWhereInput
    none?: imagemWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type imagemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type carroOrderByRelevanceInput = {
    fields: carroOrderByRelevanceFieldEnum | carroOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type carroCountOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    preco?: SortOrder
    quilometragem?: SortOrder
    cor?: SortOrder
    combustivel?: SortOrder
    cambio?: SortOrder
    portas?: SortOrder
    descricao?: SortOrder
    imagem?: SortOrder
    destaque?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    marcaId?: SortOrder
  }

  export type carroAvgOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    preco?: SortOrder
    quilometragem?: SortOrder
    portas?: SortOrder
    marcaId?: SortOrder
  }

  export type carroMaxOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    preco?: SortOrder
    quilometragem?: SortOrder
    cor?: SortOrder
    combustivel?: SortOrder
    cambio?: SortOrder
    portas?: SortOrder
    descricao?: SortOrder
    imagem?: SortOrder
    destaque?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    marcaId?: SortOrder
  }

  export type carroMinOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    preco?: SortOrder
    quilometragem?: SortOrder
    cor?: SortOrder
    combustivel?: SortOrder
    cambio?: SortOrder
    portas?: SortOrder
    descricao?: SortOrder
    imagem?: SortOrder
    destaque?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    marcaId?: SortOrder
  }

  export type carroSumOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    preco?: SortOrder
    quilometragem?: SortOrder
    portas?: SortOrder
    marcaId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CarroListRelationFilter = {
    every?: carroWhereInput
    some?: carroWhereInput
    none?: carroWhereInput
  }

  export type carroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type marcaOrderByRelevanceInput = {
    fields: marcaOrderByRelevanceFieldEnum | marcaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type marcaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    logo?: SortOrder
  }

  export type marcaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type marcaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    logo?: SortOrder
  }

  export type marcaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    logo?: SortOrder
  }

  export type marcaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CarroScalarRelationFilter = {
    is?: carroWhereInput
    isNot?: carroWhereInput
  }

  export type imagemOrderByRelevanceInput = {
    fields: imagemOrderByRelevanceFieldEnum | imagemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type imagemCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    carroId?: SortOrder
  }

  export type imagemAvgOrderByAggregateInput = {
    id?: SortOrder
    carroId?: SortOrder
  }

  export type imagemMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    carroId?: SortOrder
  }

  export type imagemMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    carroId?: SortOrder
  }

  export type imagemSumOrderByAggregateInput = {
    id?: SortOrder
    carroId?: SortOrder
  }

  export type Enumuser_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.user_role[]
    notIn?: $Enums.user_role[]
    not?: NestedEnumuser_roleFilter<$PrismaModel> | $Enums.user_role
  }

  export type userOrderByRelevanceInput = {
    fields: userOrderByRelevanceFieldEnum | userOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumuser_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.user_role[]
    notIn?: $Enums.user_role[]
    not?: NestedEnumuser_roleWithAggregatesFilter<$PrismaModel> | $Enums.user_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_roleFilter<$PrismaModel>
    _max?: NestedEnumuser_roleFilter<$PrismaModel>
  }

  export type vendedorOrderByRelevanceInput = {
    fields: vendedorOrderByRelevanceFieldEnum | vendedorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type vendedorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    createdAt?: SortOrder
  }

  export type vendedorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type vendedorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    createdAt?: SortOrder
  }

  export type vendedorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    createdAt?: SortOrder
  }

  export type vendedorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type propostaVendaOrderByRelevanceInput = {
    fields: propostaVendaOrderByRelevanceFieldEnum | propostaVendaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type propostaVendaCountOrderByAggregateInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type propostaVendaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type propostaVendaMaxOrderByAggregateInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type propostaVendaMinOrderByAggregateInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type propostaVendaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type financiamentoOrderByRelevanceInput = {
    fields: financiamentoOrderByRelevanceFieldEnum | financiamentoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type financiamentoCountOrderByAggregateInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    dataNascimento?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type financiamentoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type financiamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    dataNascimento?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type financiamentoMinOrderByAggregateInput = {
    id?: SortOrder
    veiculo?: SortOrder
    nome?: SortOrder
    telefone?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    dataNascimento?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type financiamentoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type marcaCreateNestedOneWithoutCarrosInput = {
    create?: XOR<marcaCreateWithoutCarrosInput, marcaUncheckedCreateWithoutCarrosInput>
    connectOrCreate?: marcaCreateOrConnectWithoutCarrosInput
    connect?: marcaWhereUniqueInput
  }

  export type imagemCreateNestedManyWithoutCarroInput = {
    create?: XOR<imagemCreateWithoutCarroInput, imagemUncheckedCreateWithoutCarroInput> | imagemCreateWithoutCarroInput[] | imagemUncheckedCreateWithoutCarroInput[]
    connectOrCreate?: imagemCreateOrConnectWithoutCarroInput | imagemCreateOrConnectWithoutCarroInput[]
    createMany?: imagemCreateManyCarroInputEnvelope
    connect?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
  }

  export type imagemUncheckedCreateNestedManyWithoutCarroInput = {
    create?: XOR<imagemCreateWithoutCarroInput, imagemUncheckedCreateWithoutCarroInput> | imagemCreateWithoutCarroInput[] | imagemUncheckedCreateWithoutCarroInput[]
    connectOrCreate?: imagemCreateOrConnectWithoutCarroInput | imagemCreateOrConnectWithoutCarroInput[]
    createMany?: imagemCreateManyCarroInputEnvelope
    connect?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type marcaUpdateOneRequiredWithoutCarrosNestedInput = {
    create?: XOR<marcaCreateWithoutCarrosInput, marcaUncheckedCreateWithoutCarrosInput>
    connectOrCreate?: marcaCreateOrConnectWithoutCarrosInput
    upsert?: marcaUpsertWithoutCarrosInput
    connect?: marcaWhereUniqueInput
    update?: XOR<XOR<marcaUpdateToOneWithWhereWithoutCarrosInput, marcaUpdateWithoutCarrosInput>, marcaUncheckedUpdateWithoutCarrosInput>
  }

  export type imagemUpdateManyWithoutCarroNestedInput = {
    create?: XOR<imagemCreateWithoutCarroInput, imagemUncheckedCreateWithoutCarroInput> | imagemCreateWithoutCarroInput[] | imagemUncheckedCreateWithoutCarroInput[]
    connectOrCreate?: imagemCreateOrConnectWithoutCarroInput | imagemCreateOrConnectWithoutCarroInput[]
    upsert?: imagemUpsertWithWhereUniqueWithoutCarroInput | imagemUpsertWithWhereUniqueWithoutCarroInput[]
    createMany?: imagemCreateManyCarroInputEnvelope
    set?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
    disconnect?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
    delete?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
    connect?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
    update?: imagemUpdateWithWhereUniqueWithoutCarroInput | imagemUpdateWithWhereUniqueWithoutCarroInput[]
    updateMany?: imagemUpdateManyWithWhereWithoutCarroInput | imagemUpdateManyWithWhereWithoutCarroInput[]
    deleteMany?: imagemScalarWhereInput | imagemScalarWhereInput[]
  }

  export type imagemUncheckedUpdateManyWithoutCarroNestedInput = {
    create?: XOR<imagemCreateWithoutCarroInput, imagemUncheckedCreateWithoutCarroInput> | imagemCreateWithoutCarroInput[] | imagemUncheckedCreateWithoutCarroInput[]
    connectOrCreate?: imagemCreateOrConnectWithoutCarroInput | imagemCreateOrConnectWithoutCarroInput[]
    upsert?: imagemUpsertWithWhereUniqueWithoutCarroInput | imagemUpsertWithWhereUniqueWithoutCarroInput[]
    createMany?: imagemCreateManyCarroInputEnvelope
    set?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
    disconnect?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
    delete?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
    connect?: imagemWhereUniqueInput | imagemWhereUniqueInput[]
    update?: imagemUpdateWithWhereUniqueWithoutCarroInput | imagemUpdateWithWhereUniqueWithoutCarroInput[]
    updateMany?: imagemUpdateManyWithWhereWithoutCarroInput | imagemUpdateManyWithWhereWithoutCarroInput[]
    deleteMany?: imagemScalarWhereInput | imagemScalarWhereInput[]
  }

  export type carroCreateNestedManyWithoutMarcaInput = {
    create?: XOR<carroCreateWithoutMarcaInput, carroUncheckedCreateWithoutMarcaInput> | carroCreateWithoutMarcaInput[] | carroUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: carroCreateOrConnectWithoutMarcaInput | carroCreateOrConnectWithoutMarcaInput[]
    createMany?: carroCreateManyMarcaInputEnvelope
    connect?: carroWhereUniqueInput | carroWhereUniqueInput[]
  }

  export type carroUncheckedCreateNestedManyWithoutMarcaInput = {
    create?: XOR<carroCreateWithoutMarcaInput, carroUncheckedCreateWithoutMarcaInput> | carroCreateWithoutMarcaInput[] | carroUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: carroCreateOrConnectWithoutMarcaInput | carroCreateOrConnectWithoutMarcaInput[]
    createMany?: carroCreateManyMarcaInputEnvelope
    connect?: carroWhereUniqueInput | carroWhereUniqueInput[]
  }

  export type carroUpdateManyWithoutMarcaNestedInput = {
    create?: XOR<carroCreateWithoutMarcaInput, carroUncheckedCreateWithoutMarcaInput> | carroCreateWithoutMarcaInput[] | carroUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: carroCreateOrConnectWithoutMarcaInput | carroCreateOrConnectWithoutMarcaInput[]
    upsert?: carroUpsertWithWhereUniqueWithoutMarcaInput | carroUpsertWithWhereUniqueWithoutMarcaInput[]
    createMany?: carroCreateManyMarcaInputEnvelope
    set?: carroWhereUniqueInput | carroWhereUniqueInput[]
    disconnect?: carroWhereUniqueInput | carroWhereUniqueInput[]
    delete?: carroWhereUniqueInput | carroWhereUniqueInput[]
    connect?: carroWhereUniqueInput | carroWhereUniqueInput[]
    update?: carroUpdateWithWhereUniqueWithoutMarcaInput | carroUpdateWithWhereUniqueWithoutMarcaInput[]
    updateMany?: carroUpdateManyWithWhereWithoutMarcaInput | carroUpdateManyWithWhereWithoutMarcaInput[]
    deleteMany?: carroScalarWhereInput | carroScalarWhereInput[]
  }

  export type carroUncheckedUpdateManyWithoutMarcaNestedInput = {
    create?: XOR<carroCreateWithoutMarcaInput, carroUncheckedCreateWithoutMarcaInput> | carroCreateWithoutMarcaInput[] | carroUncheckedCreateWithoutMarcaInput[]
    connectOrCreate?: carroCreateOrConnectWithoutMarcaInput | carroCreateOrConnectWithoutMarcaInput[]
    upsert?: carroUpsertWithWhereUniqueWithoutMarcaInput | carroUpsertWithWhereUniqueWithoutMarcaInput[]
    createMany?: carroCreateManyMarcaInputEnvelope
    set?: carroWhereUniqueInput | carroWhereUniqueInput[]
    disconnect?: carroWhereUniqueInput | carroWhereUniqueInput[]
    delete?: carroWhereUniqueInput | carroWhereUniqueInput[]
    connect?: carroWhereUniqueInput | carroWhereUniqueInput[]
    update?: carroUpdateWithWhereUniqueWithoutMarcaInput | carroUpdateWithWhereUniqueWithoutMarcaInput[]
    updateMany?: carroUpdateManyWithWhereWithoutMarcaInput | carroUpdateManyWithWhereWithoutMarcaInput[]
    deleteMany?: carroScalarWhereInput | carroScalarWhereInput[]
  }

  export type carroCreateNestedOneWithoutImagensInput = {
    create?: XOR<carroCreateWithoutImagensInput, carroUncheckedCreateWithoutImagensInput>
    connectOrCreate?: carroCreateOrConnectWithoutImagensInput
    connect?: carroWhereUniqueInput
  }

  export type carroUpdateOneRequiredWithoutImagensNestedInput = {
    create?: XOR<carroCreateWithoutImagensInput, carroUncheckedCreateWithoutImagensInput>
    connectOrCreate?: carroCreateOrConnectWithoutImagensInput
    upsert?: carroUpsertWithoutImagensInput
    connect?: carroWhereUniqueInput
    update?: XOR<XOR<carroUpdateToOneWithWhereWithoutImagensInput, carroUpdateWithoutImagensInput>, carroUncheckedUpdateWithoutImagensInput>
  }

  export type Enumuser_roleFieldUpdateOperationsInput = {
    set?: $Enums.user_role
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumuser_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.user_role[]
    notIn?: $Enums.user_role[]
    not?: NestedEnumuser_roleFilter<$PrismaModel> | $Enums.user_role
  }

  export type NestedEnumuser_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_role | Enumuser_roleFieldRefInput<$PrismaModel>
    in?: $Enums.user_role[]
    notIn?: $Enums.user_role[]
    not?: NestedEnumuser_roleWithAggregatesFilter<$PrismaModel> | $Enums.user_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_roleFilter<$PrismaModel>
    _max?: NestedEnumuser_roleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type marcaCreateWithoutCarrosInput = {
    nome: string
    logo: string
  }

  export type marcaUncheckedCreateWithoutCarrosInput = {
    id?: number
    nome: string
    logo: string
  }

  export type marcaCreateOrConnectWithoutCarrosInput = {
    where: marcaWhereUniqueInput
    create: XOR<marcaCreateWithoutCarrosInput, marcaUncheckedCreateWithoutCarrosInput>
  }

  export type imagemCreateWithoutCarroInput = {
    url: string
  }

  export type imagemUncheckedCreateWithoutCarroInput = {
    id?: number
    url: string
  }

  export type imagemCreateOrConnectWithoutCarroInput = {
    where: imagemWhereUniqueInput
    create: XOR<imagemCreateWithoutCarroInput, imagemUncheckedCreateWithoutCarroInput>
  }

  export type imagemCreateManyCarroInputEnvelope = {
    data: imagemCreateManyCarroInput | imagemCreateManyCarroInput[]
    skipDuplicates?: boolean
  }

  export type marcaUpsertWithoutCarrosInput = {
    update: XOR<marcaUpdateWithoutCarrosInput, marcaUncheckedUpdateWithoutCarrosInput>
    create: XOR<marcaCreateWithoutCarrosInput, marcaUncheckedCreateWithoutCarrosInput>
    where?: marcaWhereInput
  }

  export type marcaUpdateToOneWithWhereWithoutCarrosInput = {
    where?: marcaWhereInput
    data: XOR<marcaUpdateWithoutCarrosInput, marcaUncheckedUpdateWithoutCarrosInput>
  }

  export type marcaUpdateWithoutCarrosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type marcaUncheckedUpdateWithoutCarrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
  }

  export type imagemUpsertWithWhereUniqueWithoutCarroInput = {
    where: imagemWhereUniqueInput
    update: XOR<imagemUpdateWithoutCarroInput, imagemUncheckedUpdateWithoutCarroInput>
    create: XOR<imagemCreateWithoutCarroInput, imagemUncheckedCreateWithoutCarroInput>
  }

  export type imagemUpdateWithWhereUniqueWithoutCarroInput = {
    where: imagemWhereUniqueInput
    data: XOR<imagemUpdateWithoutCarroInput, imagemUncheckedUpdateWithoutCarroInput>
  }

  export type imagemUpdateManyWithWhereWithoutCarroInput = {
    where: imagemScalarWhereInput
    data: XOR<imagemUpdateManyMutationInput, imagemUncheckedUpdateManyWithoutCarroInput>
  }

  export type imagemScalarWhereInput = {
    AND?: imagemScalarWhereInput | imagemScalarWhereInput[]
    OR?: imagemScalarWhereInput[]
    NOT?: imagemScalarWhereInput | imagemScalarWhereInput[]
    id?: IntFilter<"imagem"> | number
    url?: StringFilter<"imagem"> | string
    carroId?: IntFilter<"imagem"> | number
  }

  export type carroCreateWithoutMarcaInput = {
    modelo: string
    ano: number
    preco: number
    quilometragem?: number | null
    cor?: string | null
    combustivel?: string | null
    cambio?: string | null
    portas?: number | null
    descricao?: string | null
    imagem?: string | null
    destaque?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    imagens?: imagemCreateNestedManyWithoutCarroInput
  }

  export type carroUncheckedCreateWithoutMarcaInput = {
    id?: number
    modelo: string
    ano: number
    preco: number
    quilometragem?: number | null
    cor?: string | null
    combustivel?: string | null
    cambio?: string | null
    portas?: number | null
    descricao?: string | null
    imagem?: string | null
    destaque?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    imagens?: imagemUncheckedCreateNestedManyWithoutCarroInput
  }

  export type carroCreateOrConnectWithoutMarcaInput = {
    where: carroWhereUniqueInput
    create: XOR<carroCreateWithoutMarcaInput, carroUncheckedCreateWithoutMarcaInput>
  }

  export type carroCreateManyMarcaInputEnvelope = {
    data: carroCreateManyMarcaInput | carroCreateManyMarcaInput[]
    skipDuplicates?: boolean
  }

  export type carroUpsertWithWhereUniqueWithoutMarcaInput = {
    where: carroWhereUniqueInput
    update: XOR<carroUpdateWithoutMarcaInput, carroUncheckedUpdateWithoutMarcaInput>
    create: XOR<carroCreateWithoutMarcaInput, carroUncheckedCreateWithoutMarcaInput>
  }

  export type carroUpdateWithWhereUniqueWithoutMarcaInput = {
    where: carroWhereUniqueInput
    data: XOR<carroUpdateWithoutMarcaInput, carroUncheckedUpdateWithoutMarcaInput>
  }

  export type carroUpdateManyWithWhereWithoutMarcaInput = {
    where: carroScalarWhereInput
    data: XOR<carroUpdateManyMutationInput, carroUncheckedUpdateManyWithoutMarcaInput>
  }

  export type carroScalarWhereInput = {
    AND?: carroScalarWhereInput | carroScalarWhereInput[]
    OR?: carroScalarWhereInput[]
    NOT?: carroScalarWhereInput | carroScalarWhereInput[]
    id?: IntFilter<"carro"> | number
    modelo?: StringFilter<"carro"> | string
    ano?: IntFilter<"carro"> | number
    preco?: FloatFilter<"carro"> | number
    quilometragem?: IntNullableFilter<"carro"> | number | null
    cor?: StringNullableFilter<"carro"> | string | null
    combustivel?: StringNullableFilter<"carro"> | string | null
    cambio?: StringNullableFilter<"carro"> | string | null
    portas?: IntNullableFilter<"carro"> | number | null
    descricao?: StringNullableFilter<"carro"> | string | null
    imagem?: StringNullableFilter<"carro"> | string | null
    destaque?: BoolFilter<"carro"> | boolean
    createdAt?: DateTimeFilter<"carro"> | Date | string
    updatedAt?: DateTimeFilter<"carro"> | Date | string
    marcaId?: IntFilter<"carro"> | number
  }

  export type carroCreateWithoutImagensInput = {
    modelo: string
    ano: number
    preco: number
    quilometragem?: number | null
    cor?: string | null
    combustivel?: string | null
    cambio?: string | null
    portas?: number | null
    descricao?: string | null
    imagem?: string | null
    destaque?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    marca: marcaCreateNestedOneWithoutCarrosInput
  }

  export type carroUncheckedCreateWithoutImagensInput = {
    id?: number
    modelo: string
    ano: number
    preco: number
    quilometragem?: number | null
    cor?: string | null
    combustivel?: string | null
    cambio?: string | null
    portas?: number | null
    descricao?: string | null
    imagem?: string | null
    destaque?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    marcaId: number
  }

  export type carroCreateOrConnectWithoutImagensInput = {
    where: carroWhereUniqueInput
    create: XOR<carroCreateWithoutImagensInput, carroUncheckedCreateWithoutImagensInput>
  }

  export type carroUpsertWithoutImagensInput = {
    update: XOR<carroUpdateWithoutImagensInput, carroUncheckedUpdateWithoutImagensInput>
    create: XOR<carroCreateWithoutImagensInput, carroUncheckedCreateWithoutImagensInput>
    where?: carroWhereInput
  }

  export type carroUpdateToOneWithWhereWithoutImagensInput = {
    where?: carroWhereInput
    data: XOR<carroUpdateWithoutImagensInput, carroUncheckedUpdateWithoutImagensInput>
  }

  export type carroUpdateWithoutImagensInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    marca?: marcaUpdateOneRequiredWithoutCarrosNestedInput
  }

  export type carroUncheckedUpdateWithoutImagensInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    marcaId?: IntFieldUpdateOperationsInput | number
  }

  export type imagemCreateManyCarroInput = {
    id?: number
    url: string
  }

  export type imagemUpdateWithoutCarroInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type imagemUncheckedUpdateWithoutCarroInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type imagemUncheckedUpdateManyWithoutCarroInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type carroCreateManyMarcaInput = {
    id?: number
    modelo: string
    ano: number
    preco: number
    quilometragem?: number | null
    cor?: string | null
    combustivel?: string | null
    cambio?: string | null
    portas?: number | null
    descricao?: string | null
    imagem?: string | null
    destaque?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type carroUpdateWithoutMarcaInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagens?: imagemUpdateManyWithoutCarroNestedInput
  }

  export type carroUncheckedUpdateWithoutMarcaInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imagens?: imagemUncheckedUpdateManyWithoutCarroNestedInput
  }

  export type carroUncheckedUpdateManyWithoutMarcaInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    quilometragem?: NullableIntFieldUpdateOperationsInput | number | null
    cor?: NullableStringFieldUpdateOperationsInput | string | null
    combustivel?: NullableStringFieldUpdateOperationsInput | string | null
    cambio?: NullableStringFieldUpdateOperationsInput | string | null
    portas?: NullableIntFieldUpdateOperationsInput | number | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    destaque?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}